package java.awt.event;
/*
* Copyright (c) 1997, 2007, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
extern class InputMethodEvent extends java.awt.AWTEvent
{
	/**
	* Marks the first integer id for the range of input method event ids.
	*/
	public static var INPUT_METHOD_FIRST(default, null) : Int;
	
	/**
	* The event type indicating changed input method text. This event is
	* generated by input methods while processing input.
	*/
	public static var INPUT_METHOD_TEXT_CHANGED(default, null) : Int;
	
	/**
	* The event type indicating a changed insertion point in input method text.
	* This event is
	* generated by input methods while processing input if only the caret changed.
	*/
	public static var CARET_POSITION_CHANGED(default, null) : Int;
	
	/**
	* Marks the last integer id for the range of input method event ids.
	*/
	public static var INPUT_METHOD_LAST(default, null) : Int;
	
	/**
	* Constructs an <code>InputMethodEvent</code> with the specified
	* source component, type, time, text, caret, and visiblePosition.
	* <p>
	* The offsets of caret and visiblePosition are relative to the current
	* composed text; that is, the composed text within <code>text</code>
	* if this is an <code>INPUT_METHOD_TEXT_CHANGED</code> event,
	* the composed text within the <code>text</code> of the
	* preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event otherwise.
	* <p>Note that passing in an invalid <code>id</code> results in
	* unspecified behavior. This method throws an
	* <code>IllegalArgumentException</code> if <code>source</code>
	* is <code>null</code>.
	*
	* @param source the object where the event originated
	* @param id the event type
	* @param when a long integer that specifies the time the event occurred
	* @param text the combined committed and composed text,
	*      committed text first; must be <code>null</code>
	*      when the event type is <code>CARET_POSITION_CHANGED</code>;
	*      may be <code>null</code> for
	*      <code>INPUT_METHOD_TEXT_CHANGED</code> if there's no
	*      committed or composed text
	* @param committedCharacterCount the number of committed
	*      characters in the text
	* @param caret the caret (a.k.a. insertion point);
	*      <code>null</code> if there's no caret within current
	*      composed text
	* @param visiblePosition the position that's most important
	*      to be visible; <code>null</code> if there's no
	*      recommendation for a visible position within current
	*      composed text
	* @throws IllegalArgumentException if <code>id</code> is not
	*      in the range
	*      <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>;
	*      or if id is <code>CARET_POSITION_CHANGED</code> and
	*      <code>text</code> is not <code>null</code>;
	*      or if <code>committedCharacterCount</code> is not in the range
	*      <code>0</code>..<code>(text.getEndIndex() - text.getBeginIndex())</code>
	* @throws IllegalArgumentException if <code>source</code> is null
	*
	* @since 1.4
	*/
	@:require(java4) @:overload public function new(source : java.awt.Component, id : Int, when : haxe.Int64, text : java.text.AttributedCharacterIterator, committedCharacterCount : Int, caret : java.awt.font.TextHitInfo, visiblePosition : java.awt.font.TextHitInfo) : Void;
	
	/**
	* Constructs an <code>InputMethodEvent</code> with the specified
	* source component, type, text, caret, and visiblePosition.
	* <p>
	* The offsets of caret and visiblePosition are relative to the current
	* composed text; that is, the composed text within <code>text</code>
	* if this is an <code>INPUT_METHOD_TEXT_CHANGED</code> event,
	* the composed text within the <code>text</code> of the
	* preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event otherwise.
	* The time stamp for this event is initialized by invoking
	* {@link java.awt.EventQueue#getMostRecentEventTime()}.
	* <p>Note that passing in an invalid <code>id</code> results in
	* unspecified behavior. This method throws an
	* <code>IllegalArgumentException</code> if <code>source</code>
	* is <code>null</code>.
	*
	* @param source the object where the event originated
	* @param id the event type
	* @param text the combined committed and composed text,
	*      committed text first; must be <code>null</code>
	*      when the event type is <code>CARET_POSITION_CHANGED</code>;
	*      may be <code>null</code> for
	*      <code>INPUT_METHOD_TEXT_CHANGED</code> if there's no
	*      committed or composed text
	* @param committedCharacterCount the number of committed
	*      characters in the text
	* @param caret the caret (a.k.a. insertion point);
	*      <code>null</code> if there's no caret within current
	*      composed text
	* @param visiblePosition the position that's most important
	*      to be visible; <code>null</code> if there's no
	*      recommendation for a visible position within current
	*      composed text
	* @throws IllegalArgumentException if <code>id</code> is not
	*      in the range
	*      <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>;
	*      or if id is <code>CARET_POSITION_CHANGED</code> and
	*      <code>text</code> is not <code>null</code>;
	*      or if <code>committedCharacterCount</code> is not in the range
	*      <code>0</code>..<code>(text.getEndIndex() - text.getBeginIndex())</code>
	* @throws IllegalArgumentException if <code>source</code> is null
	*/
	@:overload public function new(source : java.awt.Component, id : Int, text : java.text.AttributedCharacterIterator, committedCharacterCount : Int, caret : java.awt.font.TextHitInfo, visiblePosition : java.awt.font.TextHitInfo) : Void;
	
	/**
	* Constructs an <code>InputMethodEvent</code> with the
	* specified source component, type, caret, and visiblePosition.
	* The text is set to <code>null</code>,
	* <code>committedCharacterCount</code> to 0.
	* <p>
	* The offsets of <code>caret</code> and <code>visiblePosition</code>
	* are relative to the current composed text; that is,
	* the composed text within the <code>text</code> of the
	* preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event if the
	* event being constructed as a <code>CARET_POSITION_CHANGED</code> event.
	* For an <code>INPUT_METHOD_TEXT_CHANGED</code> event without text,
	* <code>caret</code> and <code>visiblePosition</code> must be
	* <code>null</code>.
	* The time stamp for this event is initialized by invoking
	* {@link java.awt.EventQueue#getMostRecentEventTime()}.
	* <p>Note that passing in an invalid <code>id</code> results in
	* unspecified behavior. This method throws an
	* <code>IllegalArgumentException</code> if <code>source</code>
	* is <code>null</code>.
	*
	* @param source the object where the event originated
	* @param id the event type
	* @param caret the caret (a.k.a. insertion point);
	*      <code>null</code> if there's no caret within current
	*      composed text
	* @param visiblePosition the position that's most important
	*      to be visible; <code>null</code> if there's no
	*      recommendation for a visible position within current
	*      composed text
	* @throws IllegalArgumentException if <code>id</code> is not
	*      in the range
	*      <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>
	* @throws IllegalArgumentException if <code>source</code> is null
	*/
	@:overload public function new(source : java.awt.Component, id : Int, caret : java.awt.font.TextHitInfo, visiblePosition : java.awt.font.TextHitInfo) : Void;
	
	/**
	* Gets the combined committed and composed text.
	* Characters from index 0 to index <code>getCommittedCharacterCount() - 1</code> are committed
	* text, the remaining characters are composed text.
	*
	* @return the text.
	* Always null for CARET_POSITION_CHANGED;
	* may be null for INPUT_METHOD_TEXT_CHANGED if there's no composed or committed text.
	*/
	@:overload public function getText() : java.text.AttributedCharacterIterator;
	
	/**
	* Gets the number of committed characters in the text.
	*/
	@:overload public function getCommittedCharacterCount() : Int;
	
	/**
	* Gets the caret.
	* <p>
	* The offset of the caret is relative to the current
	* composed text; that is, the composed text within getText()
	* if this is an <code>INPUT_METHOD_TEXT_CHANGED</code> event,
	* the composed text within getText() of the
	* preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event otherwise.
	*
	* @return the caret (a.k.a. insertion point).
	* Null if there's no caret within current composed text.
	*/
	@:overload public function getCaret() : java.awt.font.TextHitInfo;
	
	/**
	* Gets the position that's most important to be visible.
	* <p>
	* The offset of the visible position is relative to the current
	* composed text; that is, the composed text within getText()
	* if this is an <code>INPUT_METHOD_TEXT_CHANGED</code> event,
	* the composed text within getText() of the
	* preceding <code>INPUT_METHOD_TEXT_CHANGED</code> event otherwise.
	*
	* @return the position that's most important to be visible.
	* Null if there's no recommendation for a visible position within current composed text.
	*/
	@:overload public function getVisiblePosition() : java.awt.font.TextHitInfo;
	
	/**
	* Consumes this event so that it will not be processed
	* in the default manner by the source which originated it.
	*/
	@:overload override public function consume() : Void;
	
	/**
	* Returns whether or not this event has been consumed.
	* @see #consume
	*/
	@:overload override public function isConsumed() : Bool;
	
	/**
	* Returns the time stamp of when this event occurred.
	*
	* @return this event's timestamp
	* @since 1.4
	*/
	@:require(java4) @:overload public function getWhen() : haxe.Int64;
	
	/**
	* Returns a parameter string identifying this event.
	* This method is useful for event-logging and for debugging.
	* It contains the event ID in text form, the characters of the
	* committed and composed text
	* separated by "+", the number of committed characters,
	* the caret, and the visible position.
	*
	* @return a string identifying the event and its attributes
	*/
	@:overload override public function paramString() : String;
	
	
}
