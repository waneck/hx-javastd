package java.awt;
/*
* Copyright (c) 1996, 2011, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
extern class AWTEvent extends java.util.EventObject
{
	/**
	* The event's id.
	* @serial
	* @see #getID()
	* @see #AWTEvent
	*/
	private var id : Int;
	
	/**
	* Controls whether or not the event is sent back down to the peer once the
	* source has processed it - false means it's sent to the peer; true means
	* it's not. Semantic events always have a 'true' value since they were
	* generated by the peer in response to a low-level event.
	* @serial
	* @see #consume
	* @see #isConsumed
	*/
	private var consumed : Bool;
	
	/**
	* The event mask for selecting component events.
	*/
	public static var COMPONENT_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting container events.
	*/
	public static var CONTAINER_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting focus events.
	*/
	public static var FOCUS_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting key events.
	*/
	public static var KEY_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting mouse events.
	*/
	public static var MOUSE_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting mouse motion events.
	*/
	public static var MOUSE_MOTION_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting window events.
	*/
	public static var WINDOW_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting action events.
	*/
	public static var ACTION_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting adjustment events.
	*/
	public static var ADJUSTMENT_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting item events.
	*/
	public static var ITEM_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting text events.
	*/
	public static var TEXT_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting input method events.
	*/
	public static var INPUT_METHOD_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting paint events.
	*/
	public static var PAINT_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting invocation events.
	*/
	public static var INVOCATION_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting hierarchy events.
	*/
	public static var HIERARCHY_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting hierarchy bounds events.
	*/
	public static var HIERARCHY_BOUNDS_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting mouse wheel events.
	* @since 1.4
	*/
	@:require(java4) public static var MOUSE_WHEEL_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting window state events.
	* @since 1.4
	*/
	@:require(java4) public static var WINDOW_STATE_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The event mask for selecting window focus events.
	* @since 1.4
	*/
	@:require(java4) public static var WINDOW_FOCUS_EVENT_MASK(default, null) : haxe.Int64;
	
	/**
	* The maximum value for reserved AWT event IDs. Programs defining
	* their own event IDs should use IDs greater than this value.
	*/
	public static var RESERVED_ID_MAX(default, null) : Int;
	
	/**
	* Constructs an AWTEvent object from the parameters of a 1.0-style event.
	* @param event the old-style event
	*/
	@:overload public function new(event : java.awt.Event) : Void;
	
	/**
	* Constructs an AWTEvent object with the specified source object and type.
	*
	* @param source the object where the event originated
	* @param id the event type
	*/
	@:overload public function new(source : Dynamic, id : Int) : Void;
	
	/**
	* Retargets an event to a new source. This method is typically used to
	* retarget an event to a lightweight child Component of the original
	* heavyweight source.
	* <p>
	* This method is intended to be used only by event targeting subsystems,
	* such as client-defined KeyboardFocusManagers. It is not for general
	* client use.
	*
	* @param newSource the new Object to which the event should be dispatched
	* @since 1.4
	*/
	@:require(java4) @:overload public function setSource(newSource : Dynamic) : Void;
	
	/**
	* Returns the event type.
	*/
	@:overload public function getID() : Int;
	
	/**
	* Returns a String representation of this object.
	*/
	@:overload override public function toString() : String;
	
	/**
	* Returns a string representing the state of this <code>Event</code>.
	* This method is intended to be used only for debugging purposes, and the
	* content and format of the returned string may vary between
	* implementations. The returned string may be empty but may not be
	* <code>null</code>.
	*
	* @return  a string representation of this event
	*/
	@:overload public function paramString() : String;
	
	/**
	* Consumes this event, if this event can be consumed. Only low-level,
	* system events can be consumed
	*/
	@:overload private function consume() : Void;
	
	/**
	* Returns whether this event has been consumed.
	*/
	@:overload private function isConsumed() : Bool;
	
	
}
