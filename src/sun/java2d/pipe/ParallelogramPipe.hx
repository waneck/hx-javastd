package sun.java2d.pipe;
/*
* Copyright (c) 2008, 2011 Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
extern interface ParallelogramPipe
{
	/**
	* This interface defines the set of calls that pipeline objects
	* can use to pass on responsibility for drawing arbitrary
	* parallelogram shapes.
	* Six floating point numbers are provided and the parallelogram
	* is defined as the quadrilateral with the following vertices:
	* <pre>
	*     origin: (x, y)
	*          => (x+dx1, y+dy1)
	*          => (x+dx1+dx2, y+dy1+dy2)
	*          => (x+dx2, y+dy2)
	*          => origin
	* </pre>
	* The four u[xy][12] parameters are the unsorted extreme coordinates
	* of the primitive in user space.  They may have been generated by a
	* line or a rectangle so they could have u[xy]2 < u[xy]1 in some cases.
	* They should be sorted before calculating the bounds of the original
	* primitive (such as for calculating the user space bounds for the
	* Paint.createContext() method).
	*/
	@:overload public function fillParallelogram(sg : sun.java2d.SunGraphics2D, ux1 : Float, uy1 : Float, ux2 : Float, uy2 : Float, x : Float, y : Float, dx1 : Float, dy1 : Float, dx2 : Float, dy2 : Float) : Void;
	
	/**
	* Draw a Parallelogram with the indicated line widths
	* assuming a standard BasicStroke with MITER joins.
	* lw1 specifies the width of the stroke along the dx1,dy1
	* vector and lw2 specifies the width of the stroke along
	* the dx2,dy2 vector.
	* This is equivalent to outsetting the indicated
	* parallelogram by lw/2 pixels, then insetting the
	* same parallelogram by lw/2 pixels and filling the
	* difference between the outer and inner parallelograms.
	*/
	@:overload public function drawParallelogram(sg : sun.java2d.SunGraphics2D, ux1 : Float, uy1 : Float, ux2 : Float, uy2 : Float, x : Float, y : Float, dx1 : Float, dy1 : Float, dx2 : Float, dy2 : Float, lw1 : Float, lw2 : Float) : Void;
	
	
}
