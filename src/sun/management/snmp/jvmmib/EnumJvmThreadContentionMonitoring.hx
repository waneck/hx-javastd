package sun.management.snmp.jvmmib;
/*
* Copyright (c) 2003, 2006, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
////
//// Generated by mibgen version 5.0 (06/02/03) when compiling JVM-MANAGEMENT-MIB.
////
//// java imports
////
//// RI imports
////
/**
* The class is used for representing "JvmThreadContentionMonitoring".
*/
extern class EnumJvmThreadContentionMonitoring extends com.sun.jmx.snmp.Enumerated.Enumerated implements java.io.Serializable.Serializable
{
	private static var intTable : java.util.Hashtable.Hashtable<java.lang.Integer.Integer, java.lang.String.String>;
	
	private static var stringTable : java.util.Hashtable.Hashtable<java.lang.String.String, java.lang.Integer.Integer>;
	
	@:overload public function new(valueIndex : Int) : Void;
	
	@:overload public function new(valueIndex : java.lang.Integer.Integer) : Void;
	
	@:overload public function new() : Void;
	
	@:overload public function new(x : java.lang.String.String) : Void;
	
	@:overload override private function getIntTable() : java.util.Hashtable.Hashtable<Dynamic, Dynamic>;
	
	@:overload override private function getStringTable() : java.util.Hashtable.Hashtable<Dynamic, Dynamic>;
	
	
}
