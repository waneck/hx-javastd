package sun.awt.X11;
//// This file is an automatically generated file, please do not edit this file, modify the WrapperGenerator.java file instead !
extern class XkbMapNotifyEvent extends sun.awt.X11.XWrapperBase
{
	@:overload public static function getSize() : Int;
	
	@:overload public function getDataSize() : Int;
	
	@:overload public function getPData() : haxe.Int64;
	
	@:overload public function new(addr : haxe.Int64) : Void;
	
	@:overload public function new() : Void;
	
	@:overload public function dispose() : Void;
	
	@:overload public function get_type() : Int;
	
	@:overload public function set_type(v : Int) : Void;
	
	@:overload public function get_serial() : haxe.Int64;
	
	@:overload public function set_serial(v : haxe.Int64) : Void;
	
	@:overload public function get_send_event() : Bool;
	
	@:overload public function set_send_event(v : Bool) : Void;
	
	@:overload public function get_display() : haxe.Int64;
	
	@:overload public function set_display(v : haxe.Int64) : Void;
	
	@:overload public function get_time() : haxe.Int64;
	
	@:overload public function set_time(v : haxe.Int64) : Void;
	
	@:overload public function get_xkb_type() : Int;
	
	@:overload public function set_xkb_type(v : Int) : Void;
	
	@:overload public function get_device() : Int;
	
	@:overload public function set_device(v : Int) : Void;
	
	@:overload public function get_changed() : Int;
	
	@:overload public function set_changed(v : Int) : Void;
	
	@:overload public function get_flags() : Int;
	
	@:overload public function set_flags(v : Int) : Void;
	
	@:overload public function get_first_type() : Int;
	
	@:overload public function set_first_type(v : Int) : Void;
	
	@:overload public function get_num_types() : Int;
	
	@:overload public function set_num_types(v : Int) : Void;
	
	@:overload public function get_min_key_code() : Int;
	
	@:overload public function set_min_key_code(v : Int) : Void;
	
	@:overload public function get_max_key_code() : Int;
	
	@:overload public function set_max_key_code(v : Int) : Void;
	
	@:overload public function get_first_key_sym() : Int;
	
	@:overload public function set_first_key_sym(v : Int) : Void;
	
	@:overload public function get_first_key_act() : Int;
	
	@:overload public function set_first_key_act(v : Int) : Void;
	
	@:overload public function get_first_key_behavior() : Int;
	
	@:overload public function set_first_key_behavior(v : Int) : Void;
	
	@:overload public function get_first_key_explicit() : Int;
	
	@:overload public function set_first_key_explicit(v : Int) : Void;
	
	@:overload public function get_first_modmap_key() : Int;
	
	@:overload public function set_first_modmap_key(v : Int) : Void;
	
	@:overload public function get_first_vmodmap_key() : Int;
	
	@:overload public function set_first_vmodmap_key(v : Int) : Void;
	
	@:overload public function get_num_key_syms() : Int;
	
	@:overload public function set_num_key_syms(v : Int) : Void;
	
	@:overload public function get_num_key_acts() : Int;
	
	@:overload public function set_num_key_acts(v : Int) : Void;
	
	@:overload public function get_num_key_behaviors() : Int;
	
	@:overload public function set_num_key_behaviors(v : Int) : Void;
	
	@:overload public function get_num_key_explicit() : Int;
	
	@:overload public function set_num_key_explicit(v : Int) : Void;
	
	@:overload public function get_num_modmap_keys() : Int;
	
	@:overload public function set_num_modmap_keys(v : Int) : Void;
	
	@:overload public function get_num_vmodmap_keys() : Int;
	
	@:overload public function set_num_vmodmap_keys(v : Int) : Void;
	
	@:overload public function get_vmods() : Int;
	
	@:overload public function set_vmods(v : Int) : Void;
	
	
}
