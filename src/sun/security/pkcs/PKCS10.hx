package sun.security.pkcs;
/*
* Copyright (c) 1996, 2002, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
extern class PKCS10
{
	/**
	* Constructs an unsigned PKCS #10 certificate request.  Before this
	* request may be used, it must be encoded and signed.  Then it
	* must be retrieved in some conventional format (e.g. string).
	*
	* @param publicKey the public key that should be placed
	*          into the certificate generated by the CA.
	*/
	@:overload @:public public function new(publicKey : java.security.PublicKey) : Void;
	
	/**
	* Constructs an unsigned PKCS #10 certificate request.  Before this
	* request may be used, it must be encoded and signed.  Then it
	* must be retrieved in some conventional format (e.g. string).
	*
	* @param publicKey the public key that should be placed
	*          into the certificate generated by the CA.
	* @param attributes additonal set of PKCS10 attributes requested
	*          for in the certificate.
	*/
	@:overload @:public public function new(publicKey : java.security.PublicKey, attributes : sun.security.pkcs.PKCS10Attributes) : Void;
	
	/**
	* Parses an encoded, signed PKCS #10 certificate request, verifying
	* the request's signature as it does so.  This constructor would
	* typically be used by a Certificate Authority, from which a new
	* certificate would then be constructed.
	*
	* @param data the DER-encoded PKCS #10 request.
	* @exception IOException for low level errors reading the data
	* @exception SignatureException when the signature is invalid
	* @exception NoSuchAlgorithmException when the signature
	*  algorithm is not supported in this environment
	*/
	@:overload @:public public function new(data : java.NativeArray<java.StdTypes.Int8>) : Void;
	
	/**
	* Create the signed certificate request.  This will later be
	* retrieved in either string or binary format.
	*
	* @param subject identifies the signer (by X.500 name).
	* @param signature private key and signing algorithm to use.
	* @exception IOException on errors.
	* @exception CertificateException on certificate handling errors.
	* @exception SignatureException on signature handling errors.
	*/
	@:overload @:public public function encodeAndSign(subject : sun.security.x509.X500Name, signature : java.security.Signature) : Void;
	
	/**
	* Returns the subject's name.
	*/
	@:overload @:public public function getSubjectName() : sun.security.x509.X500Name;
	
	/**
	* Returns the subject's public key.
	*/
	@:overload @:public public function getSubjectPublicKeyInfo() : java.security.PublicKey;
	
	/**
	* Returns the additional attributes requested.
	*/
	@:overload @:public public function getAttributes() : sun.security.pkcs.PKCS10Attributes;
	
	/**
	* Returns the encoded and signed certificate request as a
	* DER-encoded byte array.
	*
	* @return the certificate request, or null if encodeAndSign()
	*          has not yet been called.
	*/
	@:overload @:public public function getEncoded() : java.NativeArray<java.StdTypes.Int8>;
	
	/**
	* Prints an E-Mailable version of the certificate request on the print
	* stream passed.  The format is a common base64 encoded one, supported
	* by most Certificate Authorities because Netscape web servers have
	* used this for some time.  Some certificate authorities expect some
	* more information, in particular contact information for the web
	* server administrator.
	*
	* @param out the print stream where the certificate request
	*  will be printed.
	* @exception IOException when an output operation failed
	* @exception SignatureException when the certificate request was
	*  not yet signed.
	*/
	@:overload @:public public function print(out : java.io.PrintStream) : Void;
	
	/**
	* Provides a short description of this request.
	*/
	@:overload @:public public function toString() : String;
	
	/**
	* Compares this object for equality with the specified
	* object. If the <code>other</code> object is an
	* <code>instanceof</code> <code>PKCS10</code>, then
	* its encoded form is retrieved and compared with the
	* encoded form of this certificate request.
	*
	* @param other the object to test for equality with this object.
	* @return true iff the encoded forms of the two certificate
	* requests match, false otherwise.
	*/
	@:overload @:public public function equals(other : Dynamic) : Bool;
	
	/**
	* Returns a hashcode value for this certificate request from its
	* encoded form.
	*
	* @return the hashcode value.
	*/
	@:overload @:public public function hashCode() : Int;
	
	
}
