package sun.tools.java;
/*
* Copyright (c) 1994, 2004, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/**
* This interface defines constant that are used
* throughout the compiler. It inherits from RuntimeConstants,
* which is an autogenerated class that contains contstants
* defined in the interpreter.
*
* WARNING: The contents of this source file are not part of any
* supported API.  Code that depends on them does so at its own risk:
* they are subject to change or removal without notice.
*
* @author      Arthur van Hoff
*/
extern interface Constants extends sun.tools.java.RuntimeConstants
{
	/*
	* Frequently used identifiers
	*/
	public var idAppend : sun.tools.java.Identifier;
	
	public var idClassInit : sun.tools.java.Identifier;
	
	public var idCode : sun.tools.java.Identifier;
	
	public var idInit : sun.tools.java.Identifier;
	
	public var idLength : sun.tools.java.Identifier;
	
	public var idNull : sun.tools.java.Identifier;
	
	public var idStar : sun.tools.java.Identifier;
	
	public var idSuper : sun.tools.java.Identifier;
	
	public var idThis : sun.tools.java.Identifier;
	
	public var idClass : sun.tools.java.Identifier;
	
	public var idToString : sun.tools.java.Identifier;
	
	public var idValueOf : sun.tools.java.Identifier;
	
	public var idNew : sun.tools.java.Identifier;
	
	public var idGetClass : sun.tools.java.Identifier;
	
	public var idTYPE : sun.tools.java.Identifier;
	
	public var idFinallyReturnValue : sun.tools.java.Identifier;
	
	public var idJavaLang : sun.tools.java.Identifier;
	
	public var idJavaLangCloneable : sun.tools.java.Identifier;
	
	public var idJavaLangError : sun.tools.java.Identifier;
	
	public var idJavaLangException : sun.tools.java.Identifier;
	
	public var idJavaLangObject : sun.tools.java.Identifier;
	
	public var idJavaLangClass : sun.tools.java.Identifier;
	
	public var idJavaLangRuntimeException : sun.tools.java.Identifier;
	
	public var idJavaLangString : sun.tools.java.Identifier;
	
	public var idJavaLangStringBuffer : sun.tools.java.Identifier;
	
	public var idJavaLangThrowable : sun.tools.java.Identifier;
	
	public var idJavaIoSerializable : sun.tools.java.Identifier;
	
	public var idConstantValue : sun.tools.java.Identifier;
	
	public var idLocalVariableTable : sun.tools.java.Identifier;
	
	public var idLineNumberTable : sun.tools.java.Identifier;
	
	public var idCoverageTable : sun.tools.java.Identifier;
	
	public var idSourceFile : sun.tools.java.Identifier;
	
	public var idDocumentation : sun.tools.java.Identifier;
	
	public var idDeprecated : sun.tools.java.Identifier;
	
	public var idSynthetic : sun.tools.java.Identifier;
	
	public var idExceptions : sun.tools.java.Identifier;
	
	public var idInnerClasses : sun.tools.java.Identifier;
	
	/* methods we need to know about */
	public var idClone : sun.tools.java.Identifier;
	
	/* This is not a real signature marker, since it is also
	* an identifier constituent character.
	*/
	public var SIGC_INNERCLASS : java.StdTypes.Char16;
	
	public var SIG_INNERCLASS : String;
	
	public var prefixThis : String;
	
	public var prefixVal : String;
	
	public var prefixLoc : String;
	
	public var prefixAccess : String;
	
	public var prefixClass : String;
	
	public var prefixArray : String;
	
	/*
	* Flags
	*/
	public var F_VERBOSE : Int;
	
	public var F_DUMP : Int;
	
	public var F_WARNINGS : Int;
	
	public var F_DEBUG_LINES : Int;
	
	public var F_DEBUG_VARS : Int;
	
	public var F_DEBUG_SOURCE : Int;
	
	public var F_OPT : Int;
	
	public var F_OPT_INTERCLASS : Int;
	
	public var F_DEPENDENCIES : Int;
	
	public var F_COVERAGE : Int;
	
	public var F_COVDATA : Int;
	
	public var F_DEPRECATION : Int;
	
	public var F_PRINT_DEPENDENCIES : Int;
	
	public var F_VERSION12 : Int;
	
	public var F_ERRORSREPORTED : Int;
	
	public var F_STRICTDEFAULT : Int;
	
	/*
	* Modifiers.
	*
	* There has been much confusion regarding modifiers.  There
	* are a number of distinct usages:
	*
	*    - in classfiles to annotate classes, as per JVM pg. 102.
	*    - in classfiles to annotate methods, as per JVM pg. 104.
	*    - in classfiles to annotate InnerClass attributes, as per
	*          http://java.sun.com/products/jdk/1.1/docs/guide/innerclasses
	*    - in the compiler to record java source level modifiers,
	*          as per JLS pg. 157 et al., plus misc. info such as whether
	*          a method is deprecated
	*    - in the JVM to record misc. info, such as whether a method has
	*          has been compiled
	*
	* To make matters worse, the terms "access flags" and "modifiers"
	* are often used interchangably, and some information that might
	* make sense as a flag is expressed using attributes (ie. Synthetic).
	*
	* The constants defined herein have been divided by whether they
	* make sense only within the compiler (M_* and MM_*) or whether
	* they only make sense to the JVM (ACC_* and ACCM_*).  At an earlier
	* time these were all lumped together.  Future maintenance should
	* strive to keep the distinction clear.
	*
	* Note that modifier M_STRICTFP is not in general recoverable from
	* the ACC_STRICT bit in classfiles.
	*
	* Note also that the modifiers M_LOCAL and M_ANONYMOUS do not appear
	* in the InnerClass attribute, as they are above the first 16 bits.
	*/
	public var M_PUBLIC : Int;
	
	public var M_PRIVATE : Int;
	
	public var M_PROTECTED : Int;
	
	public var M_STATIC : Int;
	
	public var M_TRANSIENT : Int;
	
	public var M_SYNCHRONIZED : Int;
	
	public var M_ABSTRACT : Int;
	
	public var M_NATIVE : Int;
	
	public var M_FINAL : Int;
	
	public var M_VOLATILE : Int;
	
	public var M_INTERFACE : Int;
	
	public var M_ANONYMOUS : Int;
	
	public var M_LOCAL : Int;
	
	public var M_DEPRECATED : Int;
	
	public var M_SYNTHETIC : Int;
	
	public var M_INLINEABLE : Int;
	
	public var M_STRICTFP : Int;
	
	public var paraDeprecated : String;
	
	public var MM_CLASS : Int;
	
	public var MM_MEMBER : Int;
	
	public var MM_FIELD : Int;
	
	public var MM_METHOD : Int;
	
	public var ACCM_CLASS : Int;
	
	public var ACCM_MEMBER : Int;
	
	public var ACCM_INNERCLASS : Int;
	
	public var ACCM_FIELD : Int;
	
	public var ACCM_METHOD : Int;
	
	/*
	* Type codes
	*/
	public var TC_BOOLEAN : Int;
	
	public var TC_BYTE : Int;
	
	public var TC_CHAR : Int;
	
	public var TC_SHORT : Int;
	
	public var TC_INT : Int;
	
	public var TC_LONG : Int;
	
	public var TC_FLOAT : Int;
	
	public var TC_DOUBLE : Int;
	
	public var TC_NULL : Int;
	
	public var TC_ARRAY : Int;
	
	public var TC_CLASS : Int;
	
	public var TC_VOID : Int;
	
	public var TC_METHOD : Int;
	
	public var TC_ERROR : Int;
	
	/*
	* Cover's types
	*/
	public var CT_FIRST_KIND : Int;
	
	public var CT_METHOD : Int;
	
	public var CT_FIKT_METHOD : Int;
	
	public var CT_BLOCK : Int;
	
	public var CT_FIKT_RET : Int;
	
	public var CT_CASE : Int;
	
	public var CT_SWITH_WO_DEF : Int;
	
	public var CT_BRANCH_TRUE : Int;
	
	public var CT_BRANCH_FALSE : Int;
	
	public var CT_LAST_KIND : Int;
	
	/*
	* Type Masks
	*/
	public var TM_NULL : Int;
	
	public var TM_VOID : Int;
	
	public var TM_BOOLEAN : Int;
	
	public var TM_BYTE : Int;
	
	public var TM_CHAR : Int;
	
	public var TM_SHORT : Int;
	
	public var TM_INT : Int;
	
	public var TM_LONG : Int;
	
	public var TM_FLOAT : Int;
	
	public var TM_DOUBLE : Int;
	
	public var TM_ARRAY : Int;
	
	public var TM_CLASS : Int;
	
	public var TM_METHOD : Int;
	
	public var TM_ERROR : Int;
	
	public var TM_INT32 : Int;
	
	public var TM_NUM32 : Int;
	
	public var TM_NUM64 : Int;
	
	public var TM_INTEGER : Int;
	
	public var TM_REAL : Int;
	
	public var TM_NUMBER : Int;
	
	public var TM_REFERENCE : Int;
	
	/*
	* Class status
	*/
	public var CS_UNDEFINED : Int;
	
	public var CS_UNDECIDED : Int;
	
	public var CS_BINARY : Int;
	
	public var CS_SOURCE : Int;
	
	public var CS_PARSED : Int;
	
	public var CS_CHECKED : Int;
	
	public var CS_COMPILED : Int;
	
	public var CS_NOTFOUND : Int;
	
	/*
	* Attributes
	*/
	public var ATT_ALL : Int;
	
	public var ATT_CODE : Int;
	
	public var ATT_ALLCLASSES : Int;
	
	/*
	* Number of bits used in file offsets.  The line number and
	* file offset are concatenated into a long, with enough room
	* for other information to be added later if desired (such as
	* token lengths).  For the moment explicit bit manipulations
	* are used to modify the fields.  This makes sense for efficiency
	* but at some point these ought to be better encapsulated.
	*/
	public var WHEREOFFSETBITS : Int;
	
	public var MAXFILESIZE : haxe.Int64;
	
	public var MAXLINENUMBER : haxe.Int64;
	
	/*
	* Operators
	*/
	public var COMMA : Int;
	
	public var ASSIGN : Int;
	
	public var ASGMUL : Int;
	
	public var ASGDIV : Int;
	
	public var ASGREM : Int;
	
	public var ASGADD : Int;
	
	public var ASGSUB : Int;
	
	public var ASGLSHIFT : Int;
	
	public var ASGRSHIFT : Int;
	
	public var ASGURSHIFT : Int;
	
	public var ASGBITAND : Int;
	
	public var ASGBITOR : Int;
	
	public var ASGBITXOR : Int;
	
	public var COND : Int;
	
	public var OR : Int;
	
	public var AND : Int;
	
	public var BITOR : Int;
	
	public var BITXOR : Int;
	
	public var BITAND : Int;
	
	public var NE : Int;
	
	public var EQ : Int;
	
	public var GE : Int;
	
	public var GT : Int;
	
	public var LE : Int;
	
	public var LT : Int;
	
	public var INSTANCEOF : Int;
	
	public var LSHIFT : Int;
	
	public var RSHIFT : Int;
	
	public var URSHIFT : Int;
	
	public var ADD : Int;
	
	public var SUB : Int;
	
	public var DIV : Int;
	
	public var REM : Int;
	
	public var MUL : Int;
	
	public var CAST : Int;
	
	public var POS : Int;
	
	public var NEG : Int;
	
	public var NOT : Int;
	
	public var BITNOT : Int;
	
	public var PREINC : Int;
	
	public var PREDEC : Int;
	
	public var NEWARRAY : Int;
	
	public var NEWINSTANCE : Int;
	
	public var NEWFROMNAME : Int;
	
	public var POSTINC : Int;
	
	public var POSTDEC : Int;
	
	public var FIELD : Int;
	
	public var METHOD : Int;
	
	public var ARRAYACCESS : Int;
	
	public var NEW : Int;
	
	public var INC : Int;
	
	public var DEC : Int;
	
	public var CONVERT : Int;
	
	public var EXPR : Int;
	
	public var ARRAY : Int;
	
	public var GOTO : Int;
	
	/*
	* Value tokens
	*/
	public var IDENT : Int;
	
	public var BOOLEANVAL : Int;
	
	public var BYTEVAL : Int;
	
	public var CHARVAL : Int;
	
	public var SHORTVAL : Int;
	
	public var INTVAL : Int;
	
	public var LONGVAL : Int;
	
	public var FLOATVAL : Int;
	
	public var DOUBLEVAL : Int;
	
	public var STRINGVAL : Int;
	
	/*
	* Type keywords
	*/
	public var BYTE : Int;
	
	public var CHAR : Int;
	
	public var SHORT : Int;
	
	public var INT : Int;
	
	public var LONG : Int;
	
	public var FLOAT : Int;
	
	public var DOUBLE : Int;
	
	public var VOID : Int;
	
	public var BOOLEAN : Int;
	
	/*
	* Expression keywords
	*/
	public var TRUE : Int;
	
	public var FALSE : Int;
	
	public var THIS : Int;
	
	public var SUPER : Int;
	
	public var NULL : Int;
	
	/*
	* Statement keywords
	*/
	public var IF : Int;
	
	public var ELSE : Int;
	
	public var FOR : Int;
	
	public var WHILE : Int;
	
	public var DO : Int;
	
	public var SWITCH : Int;
	
	public var CASE : Int;
	
	public var DEFAULT : Int;
	
	public var BREAK : Int;
	
	public var CONTINUE : Int;
	
	public var RETURN : Int;
	
	public var TRY : Int;
	
	public var CATCH : Int;
	
	public var FINALLY : Int;
	
	public var THROW : Int;
	
	public var STAT : Int;
	
	public var EXPRESSION : Int;
	
	public var DECLARATION : Int;
	
	public var VARDECLARATION : Int;
	
	/*
	* Declaration keywords
	*/
	public var IMPORT : Int;
	
	public var CLASS : Int;
	
	public var EXTENDS : Int;
	
	public var IMPLEMENTS : Int;
	
	public var INTERFACE : Int;
	
	public var PACKAGE : Int;
	
	/*
	* Modifier keywords
	*/
	public var PRIVATE : Int;
	
	public var PUBLIC : Int;
	
	public var PROTECTED : Int;
	
	public var CONST : Int;
	
	public var STATIC : Int;
	
	public var TRANSIENT : Int;
	
	public var SYNCHRONIZED : Int;
	
	public var NATIVE : Int;
	
	public var FINAL : Int;
	
	public var VOLATILE : Int;
	
	public var ABSTRACT : Int;
	
	public var STRICTFP : Int;
	
	/*
	* Punctuation
	*/
	public var SEMICOLON : Int;
	
	public var COLON : Int;
	
	public var QUESTIONMARK : Int;
	
	public var LBRACE : Int;
	
	public var RBRACE : Int;
	
	public var LPAREN : Int;
	
	public var RPAREN : Int;
	
	public var LSQBRACKET : Int;
	
	public var RSQBRACKET : Int;
	
	public var THROWS : Int;
	
	/*
	* Special tokens
	*/
	public var ERROR : Int;
	
	public var COMMENT : Int;
	
	public var TYPE : Int;
	
	public var LENGTH : Int;
	
	public var INLINERETURN : Int;
	
	public var INLINEMETHOD : Int;
	
	public var INLINENEWINSTANCE : Int;
	
	/*
	* Operator precedence
	*/
	public var opPrecedence : java.NativeArray<Int>;
	
	/*
	* Operator names
	*/
	public var opNames : java.NativeArray<String>;
	
	
}
