package sun.tools.java;
/*
* Copyright (c) 1994, 2006, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
extern class BinaryClass extends sun.tools.java.ClassDefinition implements sun.tools.java.Constants
{
	/**
	* Constructor
	*/
	@:overload public function new(source : Dynamic, declaration : sun.tools.java.ClassDeclaration, modifiers : Int, superClass : sun.tools.java.ClassDeclaration, interfaces : java.NativeArray<sun.tools.java.ClassDeclaration>, dependencies : java.util.Vector<Dynamic>) : Void;
	
	/**
	* Ready a BinaryClass for further checking.  Note that, until recently,
	* BinaryClass relied on the default basicCheck() provided by
	* ClassDefinition.  The definition here has been added to ensure that
	* the information generated by collectInheritedMethods is available
	* for BinaryClasses.
	*/
	@:overload override private function basicCheck(env : sun.tools.java.Environment) : Void;
	
	/**
	* Load a binary class
	*/
	@:overload public static function load(env : sun.tools.java.Environment, _in : java.io.DataInputStream) : sun.tools.java.BinaryClass;
	
	@:overload public static function load(env : sun.tools.java.Environment, _in : java.io.DataInputStream, mask : Int) : sun.tools.java.BinaryClass;
	
	/**
	* Called when an environment ties a binary definition to a declaration.
	* At this point, auxiliary definitions may be loaded.
	*/
	@:overload public function loadNested(env : sun.tools.java.Environment) : Void;
	
	@:overload public function loadNested(env : sun.tools.java.Environment, flags : Int) : Void;
	
	/**
	* Write the class out to a given stream.  This function mirrors the loader.
	*/
	@:overload public function write(env : sun.tools.java.Environment, out : java.io.OutputStream) : Void;
	
	/**
	* Get the dependencies
	*/
	@:overload public function getDependencies() : java.util.Enumeration<Dynamic>;
	
	/**
	* Add a dependency
	*/
	@:overload override public function addDependency(c : sun.tools.java.ClassDeclaration) : Void;
	
	/**
	* Get the constant pool
	*/
	@:overload public function getConstants() : sun.tools.java.BinaryConstantPool;
	
	/**
	* Get a class attribute
	*/
	@:overload public function getAttribute(name : sun.tools.java.Identifier) : java.NativeArray<java.StdTypes.Int8>;
	
	
}
