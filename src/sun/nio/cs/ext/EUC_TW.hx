package sun.nio.cs.ext;
/*
* Copyright (c) 2009, 2010, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
extern class EUC_TW extends java.nio.charset.Charset implements sun.nio.cs.HistoricallyNamedCharset
{
	/*
	(1) EUC_TW
	Second byte of EUC_TW for cs2 is in range of
	0xA1-0xB0 for plane 1-16. According to CJKV /163,
	plane1 is coded in both cs1 and cs2. This impl
	however does not decode the codepoints of plane1
	in cs2, so only p2-p7 and p15 are supported in cs2.

	Plane2  0xA2;
	Plane3  0xA3;
	Plane4  0xA4;
	Plane5  0xA5;
	Plane6  0xA6;
	Plane7  0xA7;
	Plane15 0xAF;

	(2) Mapping
	The fact that all supplementary characters encoded in EUC_TW are
	in 0x2xxxx range gives us the room to optimize the data tables.

	Decoding:
	(1) save the lower 16-bit value of all codepoints of b->c mapping
	in a String array table  String[plane] b2c.
	(2) save "codepoint is supplementary" info (one bit) in a
	byte[] b2cIsSupp, so 8 codepoints (same codepoint value, different
	plane No) share one byte.

	Encoding:
	(1)c->b mappings are stored in
	char[]c2b/char[]c2bIndex
	char[]c2bSupp/char[]c2bIndexsupp  (indexed by lower 16-bit
	(2)byte[] c2bPlane stores the "plane info" of each euc-tw codepoints,
	BMP and Supp share the low/high 4 bits of one byte.

	Mapping tables are stored separated in EUC_TWMapping, which
	is generated by tool.
	*/
	@:overload @:public public function new() : Void;
	
	@:overload @:public public function historicalName() : String;
	
	@:overload @:public override public function contains(cs : java.nio.charset.Charset) : Bool;
	
	@:overload @:public override public function newDecoder() : java.nio.charset.CharsetDecoder;
	
	@:overload @:public override public function newEncoder() : java.nio.charset.CharsetEncoder;
	
	
}
@:native('sun$nio$cs$ext$EUC_TW$Decoder') extern class EUC_TW_Decoder extends java.nio.charset.CharsetDecoder
{
	@:overload @:public public function new(cs : java.nio.charset.Charset) : Void;
	
	@:overload @:public public function toUnicode(b1 : Int, b2 : Int, p : Int) : java.NativeArray<java.StdTypes.Char16>;
	
	@:overload @:protected override private function decodeLoop(src : java.nio.ByteBuffer, dst : java.nio.CharBuffer) : java.nio.charset.CoderResult;
	
	
}
@:native('sun$nio$cs$ext$EUC_TW$Encoder') extern class EUC_TW_Encoder extends java.nio.charset.CharsetEncoder
{
	@:overload @:public public function new(cs : java.nio.charset.Charset) : Void;
	
	@:overload @:public override public function canEncode(c : java.StdTypes.Char16) : Bool;
	
	@:overload @:public override public function canEncode(cs : java.lang.CharSequence) : Bool;
	
	@:overload @:public public function toEUC(hi : java.StdTypes.Char16, low : java.StdTypes.Char16, bb : java.NativeArray<java.StdTypes.Int8>) : Int;
	
	@:overload @:public public function toEUC(c : java.StdTypes.Char16, bb : java.NativeArray<java.StdTypes.Int8>) : Int;
	
	@:overload @:protected override private function encodeLoop(src : java.nio.CharBuffer, dst : java.nio.ByteBuffer) : java.nio.charset.CoderResult;
	
	
}
