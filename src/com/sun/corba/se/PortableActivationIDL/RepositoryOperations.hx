package com.sun.corba.se.PortableActivationIDL;
/**
* com/sun/corba/se/PortableActivationIDL/RepositoryOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ../../../../src/share/classes/com/sun/corba/se/PortableActivationIDL/activation.idl
* Thursday, February 21, 2013 9:14:13 AM UTC
*/
extern interface RepositoryOperations
{
	/** register server definition.
		* This returns the serverId of the server.  A newly created server is
		* always uninstalled.
		*/
	@:overload public function registerServer(serverDef : com.sun.corba.se.PortableActivationIDL.RepositoryPackage.ServerDef) : String;
	
	/** unregister server definition
		*/
	@:overload public function unregisterServer(serverId : String) : Void;
	
	/** get server definition
		*/
	@:overload public function getServer(serverId : String) : com.sun.corba.se.PortableActivationIDL.RepositoryPackage.ServerDef;
	
	/** Return whether the server has been installed
		*/
	@:overload public function isInstalled(serverId : String) : Bool;
	
	/** Mark the server as being installed.  Raises ServerAlreadyInstalled
		* if the server is currently marked as installed.
		*/
	@:overload public function install(serverId : String) : Void;
	
	/** Mark the server as being uninstalled.  Raises ServerAlreadyUninstalled
		* if the server is currently marked as uninstalled.
		*/
	@:overload public function uninstall(serverId : String) : Void;
	
	/** list registered servers
		*/
	@:overload public function listRegisteredServers() : java.NativeArray<String>;
	
	/** Returns list of ALL applicationNames defined in ServerDefs of registered 
		* servers.
		*/
	@:overload public function getApplicationNames() : java.NativeArray<String>;
	
	/** Find the ServerID associated with the given application name.
		*/
	@:overload public function getServerID(applicationName : String) : String;
	
	
}
