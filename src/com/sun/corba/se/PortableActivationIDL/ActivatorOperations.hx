package com.sun.corba.se.PortableActivationIDL;
/**
* com/sun/corba/se/PortableActivationIDL/ActivatorOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ../../../../src/share/classes/com/sun/corba/se/PortableActivationIDL/activation.idl
* Thursday, February 21, 2013 9:14:13 AM UTC
*/
extern interface ActivatorOperations
{
	/** A new ORB started server registers itself with the Activator
		*/
	@:overload public function registerServer(serverId : String, serverObj : com.sun.corba.se.PortableActivationIDL.ServerProxy) : Void;
	
	/** A server is shutting down that was started by this activator.
		* Complete termination of the server is detected by the death of the
		* process implementing the server.
		*/
	@:overload public function serverGoingDown(serverId : String) : Void;
	
	/** Called whenever an ORB instance is created.  This registers
		* the transport endpoints and the ORB proxy callback object.
		* Note that we cannot detect when an ORB shuts down, although
		* all of the POA shutdowns should still be reported.
		*/
	@:overload public function registerORB(serverId : String, orbId : String, orb : com.sun.corba.se.PortableActivationIDL.ORBProxy, endPointInfo : java.NativeArray<com.sun.corba.se.PortableActivationIDL.EndPointInfo>) : Void;
	
	/** Construct or find an ORBD object template corresponding to the 
		* server's object template and return it.  Called whenever a 
		* persistent POA is created.
		*/
	@:overload public function registerPOA(serverId : String, orbId : String, poaTemplate : org.omg.PortableInterceptor.ObjectReferenceTemplate) : org.omg.PortableInterceptor.ObjectReferenceTemplate;
	
	/** Called whenever a POA is destroyed.
		*/
	@:overload public function poaDestroyed(serverId : String, orbId : String, poaTemplate : org.omg.PortableInterceptor.ObjectReferenceTemplate) : Void;
	
	/** If the server is not running, start it up.  This is allowed
		* whether or not the server has been installed.
		*/
	@:overload public function activate(serverId : String) : Void;
	
	/** If the server is running, shut it down
		*/
	@:overload public function shutdown(serverId : String) : Void;
	
	/** Invoke the server install hook.  If the server is not 
		* currently running, this method will activate it.
		*/
	@:overload public function install(serverId : String) : Void;
	
	/** Invoke the server uninstall hook.  If the server is not
		* currently running, this method will activate it.
		* After this hook completes, the server may still be running.
		*/
	@:overload public function uninstall(serverId : String) : Void;
	
	/** list active servers
		*/
	@:overload public function getActiveServers() : java.NativeArray<String>;
	
	/** list all registered ORBs for a server
		*/
	@:overload public function getORBNames(serverId : String) : java.NativeArray<String>;
	
	/** Find the server template that corresponds to the ORBD's
		* adapter id.
		*/
	@:overload public function lookupPOATemplate(serverId : String, orbId : String, orbAdapterName : java.NativeArray<String>) : org.omg.PortableInterceptor.ObjectReferenceTemplate;
	
	
}
