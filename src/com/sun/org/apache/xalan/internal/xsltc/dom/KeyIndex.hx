package com.sun.org.apache.xalan.internal.xsltc.dom;
/*
* reserved comment block
* DO NOT REMOVE OR ALTER!
*/
/*
* Copyright 2001-2006 The Apache Software Foundation.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/*
* $Id: KeyIndex.java,v 1.6 2006/06/19 19:49:02 spericas Exp $
*/
extern class KeyIndex extends com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase
{
	@:overload public function new(dummy : Int) : Void;
	
	@:overload public function setRestartable(flag : Bool) : Void;
	
	/**
	* Adds a node to the node list for a given value. Nodes will
	* always be added in document order.
	*/
	@:overload public function add(value : Dynamic, node : Int, rootNode : Int) : Void;
	
	/**
	* Merge the current value's nodeset set by lookupKey() with _nodes.
	* @deprecated
	*/
	@:overload public function merge(other : com.sun.org.apache.xalan.internal.xsltc.dom.KeyIndex) : Void;
	
	/**
	* This method must be called by the code generated by the id() function
	* prior to returning the node iterator. The lookup code for key() and
	* id() differ in the way the lookup value can be whitespace separated
	* list of tokens for the id() function, but a single string for the
	* key() function.
	* @deprecated
	*/
	@:overload public function lookupId(value : Dynamic) : Void;
	
	/**
	* Return an IntegerArray for the DOM Node which has the given id.
	*
	* @param id The id
	* @return A IntegerArray representing the Node whose id is the given value.
	*/
	@:overload public function getDOMNodeById(id : String) : com.sun.org.apache.xalan.internal.xsltc.util.IntegerArray;
	
	/**
	* <p>This method must be called by the code generated by the key() function
	* prior to returning the node iterator.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function lookupKey(value : Dynamic) : Void;
	
	/**
	* <p>Callers should not call next() after it returns END.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function next() : Int;
	
	/**
	* Given a context node and the argument to the XPath <code>id</code>
	* function, checks whether the context node is in the set of nodes that
	* results from that reference to the <code>id</code> function.  This is
	* used in the implementation of <code>id</code> patterns.
	*
	* @param node The context node
	* @param value The argument to the <code>id</code> function
	* @return <code>1</code> if the context node is in the set of nodes
	*         returned by the reference to the <code>id</code> function;
	*         <code>0</code>, otherwise
	*/
	@:overload public function containsID(node : Int, value : Dynamic) : Int;
	
	/**
	* <p>Given a context node and the second argument to the XSLT
	* <code>key</code> function, checks whether the context node is in the
	* set of nodes that results from that reference to the <code>key</code>
	* function.  This is used in the implementation of key patterns.</p>
	* <p>This particular {@link KeyIndex} object is the result evaluating the
	* first argument to the <code>key</code> function, so it's not taken into
	* any further account.</p>
	*
	* @param node The context node
	* @param value The second argument to the <code>key</code> function
	* @return <code>1</code> if and only if the context node is in the set of
	*         nodes returned by the reference to the <code>key</code> function;
	*         <code>0</code>, otherwise
	*/
	@:overload public function containsKey(node : Int, value : Dynamic) : Int;
	
	/**
	* <p>Resets the iterator to the last start node.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function reset() : com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
	
	/**
	* <p>Returns the number of elements in this iterator.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function getLast() : Int;
	
	/**
	* <p>Returns the position of the current node in the set.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function getPosition() : Int;
	
	/**
	* <p>Remembers the current node for the next call to gotoMark().</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function setMark() : Void;
	
	/**
	* <p>Restores the current node remembered by setMark().</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function gotoMark() : Void;
	
	/**
	* <p>Set start to END should 'close' the iterator,
	* i.e. subsequent call to next() should return END.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function setStartNode(start : Int) : com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
	
	/**
	* <p>Get start to END should 'close' the iterator,
	* i.e. subsequent call to next() should return END.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function getStartNode() : Int;
	
	/**
	* <p>True if this iterator has a reversed axis.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function isReverse() : Bool;
	
	/**
	* <p>Returns a deep copy of this iterator.</p>
	* <p><em>Use of an instance of this class as a {@link DTMAxisIterator} is
	* <b>deprecated.</b></em></p>
	* @deprecated
	*/
	@:overload public function cloneIterator() : com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
	
	@:overload public function setDom(dom : com.sun.org.apache.xalan.internal.xsltc.DOM, node : Int) : Void;
	
	/**
	* Create a {@link KeyIndexIterator} that iterates over the nodes that
	* result from a reference to the XSLT <code>key</code> function or
	* XPath <code>id</code> function.
	*
	* @param keyValue A string or iterator representing the key values or id
	*                 references
	* @param isKeyCall A <code>boolean</code> indicating whether the iterator
	*                 is being created for a reference <code>key</code> or
	*                 <code>id</code>
	*/
	@:overload public function getKeyIndexIterator(keyValue : Dynamic, isKeyCall : Bool) : com.sun.org.apache.xalan.internal.xsltc.dom.KeyIndex.KeyIndex_KeyIndexIterator;
	
	/**
	* Create a {@link KeyIndexIterator} that iterates over the nodes that
	* result from a reference to the XSLT <code>key</code> function or
	* XPath <code>id</code> function.
	*
	* @param keyValue A string representing the key values or id
	*                 references
	* @param isKeyCall A <code>boolean</code> indicating whether the iterator
	*                 is being created for a reference <code>key</code> or
	*                 <code>id</code>
	*/
	@:overload public function getKeyIndexIterator(keyValue : String, isKeyCall : Bool) : com.sun.org.apache.xalan.internal.xsltc.dom.KeyIndex.KeyIndex_KeyIndexIterator;
	
	/**
	* Create a {@link KeyIndexIterator} that iterates over the nodes that
	* result from a reference to the XSLT <code>key</code> function or
	* XPath <code>id</code> function.
	*
	* @param keyValue An iterator representing the key values or id
	*                 references
	* @param isKeyCall A <code>boolean</code> indicating whether the iterator
	*                 is being created for a reference <code>key</code> or
	*                 <code>id</code>
	*/
	@:overload public function getKeyIndexIterator(keyValue : com.sun.org.apache.xml.internal.dtm.DTMAxisIterator, isKeyCall : Bool) : com.sun.org.apache.xalan.internal.xsltc.dom.KeyIndex.KeyIndex_KeyIndexIterator;
	
	
}
/**
* An iterator representing the result of a reference to either the
* XSLT <code>key</code> function or the XPath <code>id</code> function.
*/
@:native('com$sun$org$apache$xalan$internal$xsltc$dom$KeyIndex$KeyIndexIterator') extern class KeyIndex_KeyIndexIterator extends com.sun.org.apache.xalan.internal.xsltc.dom.MultiValuedNodeHeapIterator
{
	/**
	* Retrieve nodes for a particular key value or a particular id
	* argument value.
	*
	* @param root The root node of the document containing the context node
	* @param keyValue The key value of id string argument value
	* @return an {@link IntegerArray} of the resulting nodes
	*/
	@:overload private function lookupNodes(root : Int, keyValue : String) : com.sun.org.apache.xalan.internal.xsltc.util.IntegerArray;
	
	/**
	* Set context node for the iterator.  This will cause the iterator
	* to reset itself, reevaluate arguments to the function, look up
	* nodes in the input and reinitialize its internal heap.
	*
	* @param node the context node
	* @return A {@link DTMAxisIterator} set to the start of the iteration.
	*/
	@:overload public function setStartNode(node : Int) : com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
	
	/**
	* Get the next node in the iteration.
	*
	* @return The next node handle in the iteration, or END.
	*/
	@:overload public function next() : Int;
	
	/**
	* Resets the iterator to the last start node.
	*
	* @return A DTMAxisIterator, which may or may not be the same as this
	*         iterator.
	*/
	@:overload public function reset() : com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
	
	/**
	* Evaluate the reference to the <code>key</code> or <code>id</code>
	* function with the context specified by {@link #setStartNode(int)}
	* and set up this iterator to iterate over the DTM nodes that are
	* to be returned.
	*/
	@:overload private function init() : Void;
	
	/**
	* Returns the number of nodes in this iterator.
	*
	* @return the number of nodes
	*/
	@:overload public function getLast() : Int;
	
	/**
	* Return the node at the given position.
	*
	* @param position The position
	* @return The node at the given position.
	*/
	@:overload public function getNodeByPosition(position : Int) : Int;
	
	
}
/**
* Represents the DTM nodes retrieved for one key value or one string
* argument to <code>id</code> for use as one heap node in a
* {@link MultiValuedNodeHeapIterator}.
*/
@:native('com$sun$org$apache$xalan$internal$xsltc$dom$KeyIndex$KeyIndexIterator$KeyIndexHeapNode') extern class KeyIndex_KeyIndexIterator_KeyIndexHeapNode extends com.sun.org.apache.xalan.internal.xsltc.dom.MultiValuedNodeHeapIterator.MultiValuedNodeHeapIterator_HeapNode
{
	/**
	* Advance to the next node represented by this {@link HeapNode}
	*
	* @return the next DTM node.
	*/
	@:overload public function step() : Int;
	
	/**
	* Creates a deep copy of this {@link HeapNode}.  The clone is not
	* reset from the current position of the original.
	*
	* @return the cloned heap node
	*/
	@:overload public function cloneHeapNode() : com.sun.org.apache.xalan.internal.xsltc.dom.MultiValuedNodeHeapIterator.MultiValuedNodeHeapIterator_HeapNode;
	
	/**
	* Remembers the current node for the next call to
	* {@link #gotoMark()}.
	*/
	@:overload public function setMark() : Void;
	
	/**
	* Restores the current node remembered by {@link #setMark()}.
	*/
	@:overload public function gotoMark() : Void;
	
	/**
	* Performs a comparison of the two heap nodes
	*
	* @param heapNode the heap node against which to compare
	* @return <code>true</code> if and only if the current node for
	*         this heap node is before the current node of the
	*         argument heap node in document order.
	*/
	@:overload public function isLessThan(heapNode : com.sun.org.apache.xalan.internal.xsltc.dom.MultiValuedNodeHeapIterator.MultiValuedNodeHeapIterator_HeapNode) : Bool;
	
	/**
	* <p>Sets context with respect to which this heap node is
	* evaluated.</p>
	* <p>This has no real effect on this kind of heap node.  Instead,
	* the {@link KeyIndexIterator#setStartNode(int)} method should
	* create new instances of this class to represent the effect of
	* changing the context.</p>
	*/
	@:overload public function setStartNode(node : Int) : com.sun.org.apache.xalan.internal.xsltc.dom.MultiValuedNodeHeapIterator.MultiValuedNodeHeapIterator_HeapNode;
	
	/**
	* Reset the heap node back to its beginning.
	*/
	@:overload public function reset() : com.sun.org.apache.xalan.internal.xsltc.dom.MultiValuedNodeHeapIterator.MultiValuedNodeHeapIterator_HeapNode;
	
	
}
