package com.sun.org.apache.xalan.internal.xsltc.compiler;
////----------------------------------------------------
//// The following code was generated by CUP v0.10j
//// Thu Oct 06 10:09:26 PDT 2005
////----------------------------------------------------
extern class XPathParser extends com.sun.java_cup.internal.runtime.lr_parser
{
	/** Default constructor. */
	@:overload @:public public function new() : Void;
	
	/** Constructor which sets the default scanner. */
	@:overload @:public public function new(s : com.sun.java_cup.internal.runtime.Scanner) : Void;
	
	/** Production table. */
	@:protected @:static @:final private static var _production_table(default, null) : java.NativeArray<java.NativeArray<java.StdTypes.Int16>>;
	
	/** Access to production table. */
	@:overload @:public public function production_table() : java.NativeArray<java.NativeArray<java.StdTypes.Int16>>;
	
	/** Parse-action table. */
	@:protected @:static @:final private static var _action_table(default, null) : java.NativeArray<java.NativeArray<java.StdTypes.Int16>>;
	
	/** Access to parse-action table. */
	@:overload @:public public function action_table() : java.NativeArray<java.NativeArray<java.StdTypes.Int16>>;
	
	/** <code>reduce_goto</code> table. */
	@:protected @:static @:final private static var _reduce_table(default, null) : java.NativeArray<java.NativeArray<java.StdTypes.Int16>>;
	
	/** Access to <code>reduce_goto</code> table. */
	@:overload @:public public function reduce_table() : java.NativeArray<java.NativeArray<java.StdTypes.Int16>>;
	
	/** Instance of action encapsulation class. */
	@:protected private var action_obj : com.sun.org.apache.xalan.internal.xsltc.compiler.XPathParser.CUP$XPathParser$actions;
	
	/** Action encapsulation object initializer. */
	@:overload @:protected private function init_actions() : Void;
	
	/** Invoke a user supplied parse action. */
	@:overload @:public public function do_action(act_num : Int, parser : com.sun.java_cup.internal.runtime.lr_parser, stack : java.util.Stack<Dynamic>, top : Int) : com.sun.java_cup.internal.runtime.Symbol;
	
	/** Indicates start state. */
	@:overload @:public public function start_state() : Int;
	
	/** Indicates start production. */
	@:overload @:public public function start_production() : Int;
	
	/** <code>EOF</code> Symbol index. */
	@:overload @:public public function EOF_sym() : Int;
	
	/** <code>error</code> Symbol index. */
	@:overload @:public public function error_sym() : Int;
	
	/**
	* Used by function calls with no args.
	*/
	@:static @:public @:final public static var EmptyArgs(default, null) : java.util.Vector<Dynamic>;
	
	/**
	* Reference to non-existing variable.
	*/
	@:static @:public @:final public static var DummyVarRef(default, null) : com.sun.org.apache.xalan.internal.xsltc.compiler.VariableRef;
	
	/**
	* Reference to the symbol table.
	*/
	@:public public var _symbolTable : com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable;
	
	@:overload @:public public function new(parser : com.sun.org.apache.xalan.internal.xsltc.compiler.Parser) : Void;
	
	@:overload @:public public function getLineNumber() : Int;
	
	@:overload @:public public function getQNameIgnoreDefaultNs(name : String) : com.sun.org.apache.xalan.internal.xsltc.compiler.QName;
	
	@:overload @:public public function getQName(namespace : String, prefix : String, localname : String) : com.sun.org.apache.xalan.internal.xsltc.compiler.QName;
	
	@:overload @:public public function setMultiDocument(flag : Bool) : Void;
	
	@:overload @:public public function setCallsNodeset(flag : Bool) : Void;
	
	@:overload @:public public function setHasIdCall(flag : Bool) : Void;
	
	/**
	* This method is similar to findNodeType(int, Object) except that it
	* creates a StepPattern instead of just returning a node type. It also
	* differs in the way it handles "{uri}:*" and "{uri}:@*". The last two
	* patterns are expanded as "*[namespace-uri() = 'uri']" and
	* "@*[namespace-uri() = 'uri']", respectively. This expansion considerably
	* simplifies the grouping of patterns in the Mode class. For this
	* expansion to be correct, the priority of the pattern/template must be
	* set to -0.25 (when no other predicates are present).
	*/
	@:overload @:public public function createStepPattern(axis : Int, test : Dynamic, predicates : java.util.Vector<Dynamic>) : com.sun.org.apache.xalan.internal.xsltc.compiler.StepPattern;
	
	@:overload @:public public function findNodeType(axis : Int, test : Dynamic) : Int;
	
	/**
	* Parse the expression passed to the current scanner. If this
	* expression contains references to local variables and it will be
	* compiled in an external module (not in the main class) request
	* the current template to create a new variable stack frame.
	*
	* @param lineNumber Line where the current expression is defined.
	* @param external   Set to <tt>true</tt> if this expression is
	*                   compiled in a separate module.
	*
	*/
	@:overload @:public public function parse(expression : String, lineNumber : Int) : com.sun.java_cup.internal.runtime.Symbol;
	
	@:overload @:public @:final public function addError(error : com.sun.org.apache.xalan.internal.xsltc.compiler.util.ErrorMsg) : Void;
	
	@:overload @:public public function report_error(message : String, info : Dynamic) : Void;
	
	@:overload @:public public function report_fatal_error(message : String, info : Dynamic) : Void;
	
	@:overload @:public public function insertStep(step : com.sun.org.apache.xalan.internal.xsltc.compiler.Step, rlp : com.sun.org.apache.xalan.internal.xsltc.compiler.RelativeLocationPath) : com.sun.org.apache.xalan.internal.xsltc.compiler.RelativeLocationPath;
	
	/**
	* Returns true if the axis applies to elements only. The axes
	* child, attribute, namespace, descendant result in non-empty
	* nodesets only if the context node is of type element.
	*/
	@:overload @:public public function isElementAxis(axis : Int) : Bool;
	
	
}
@:internal extern class CUP$XPathParser$actions
{
	/** Method with the actual generated action code. */
	@:overload @:public @:final public function CUP$XPathParser$do_action(CUP$XPathParser$act_num : Int, CUP$XPathParser$parser : com.sun.java_cup.internal.runtime.lr_parser, CUP$XPathParser$stack : java.util.Stack<Dynamic>, CUP$XPathParser$top : Int) : com.sun.java_cup.internal.runtime.Symbol;
	
	
}
