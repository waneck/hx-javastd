package com.sun.org.apache.xalan.internal.xsltc.compiler;
/*
* reserved comment block
* DO NOT REMOVE OR ALTER!
*/
/*
* Copyright 2001-2004 The Apache Software Foundation.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/*
* $Id: Whitespace.java,v 1.5 2005/09/28 13:48:18 pvedula Exp $
*/
@:internal extern class Whitespace extends com.sun.org.apache.xalan.internal.xsltc.compiler.TopLevelElement
{
	/**
	* @author Morten Jorgensen
	*/
	public static var USE_PREDICATE(default, null) : Int;
	
	public static var STRIP_SPACE(default, null) : Int;
	
	public static var PRESERVE_SPACE(default, null) : Int;
	
	public static var RULE_NONE(default, null) : Int;
	
	public static var RULE_ELEMENT(default, null) : Int;
	
	public static var RULE_NAMESPACE(default, null) : Int;
	
	public static var RULE_ALL(default, null) : Int;
	
	/**
	* Parse the attributes of the xsl:strip/preserve-space element.
	* The element should have not contents (ignored if any).
	*/
	@:overload override public function parseContents(parser : com.sun.org.apache.xalan.internal.xsltc.compiler.Parser) : Void;
	
	/**
	* De-tokenize the elements listed in the 'elements' attribute and
	* instanciate a set of strip/preserve rules.
	*/
	@:overload public function getRules() : java.util.Vector<Dynamic>;
	
	@:overload public static function compileStripSpace(strip : java.NativeArray<com.sun.org.apache.bcel.internal.generic.BranchHandle>, sCount : Int, il : com.sun.org.apache.bcel.internal.generic.InstructionList) : Void;
	
	@:overload public static function compilePreserveSpace(preserve : java.NativeArray<com.sun.org.apache.bcel.internal.generic.BranchHandle>, pCount : Int, il : com.sun.org.apache.bcel.internal.generic.InstructionList) : Void;
	
	/**
	* Takes a vector of WhitespaceRule objects and generates a predicate
	* method. This method returns the translets default action for handling
	* whitespace text-nodes:
	*    - USE_PREDICATE  (run the method generated by this method)
	*    - STRIP_SPACE    (always strip whitespace text-nodes)
	*    - PRESERVE_SPACE (always preserve whitespace text-nodes)
	*/
	@:overload public static function translateRules(rules : java.util.Vector<Dynamic>, classGen : com.sun.org.apache.xalan.internal.xsltc.compiler.util.ClassGenerator) : Int;
	
	/**
	* Type-check contents/attributes - nothing to do...
	*/
	@:overload override public function typeCheck(stable : com.sun.org.apache.xalan.internal.xsltc.compiler.SymbolTable) : com.sun.org.apache.xalan.internal.xsltc.compiler.util.Type;
	
	/**
	* This method should not produce any code
	*/
	@:overload override public function translate(classGen : com.sun.org.apache.xalan.internal.xsltc.compiler.util.ClassGenerator, methodGen : com.sun.org.apache.xalan.internal.xsltc.compiler.util.MethodGenerator) : Void;
	
	
}
/**
* Auxillary class for encapsulating a single strip/preserve rule
*/
@:native('com$sun$org$apache$xalan$internal$xsltc$compiler$Whitespace$WhitespaceRule') @:internal extern class Whitespace_WhitespaceRule
{
	/**
	* Strip/preserve rule constructor
	*/
	@:overload public function new(action : Int, element : String, precedence : Int) : Void;
	
	/**
	* For sorting rules depending on priority
	*/
	@:overload public function compareTo(other : Whitespace_WhitespaceRule) : Int;
	
	@:overload public function getAction() : Int;
	
	@:overload public function getStrength() : Int;
	
	@:overload public function getPriority() : Int;
	
	@:overload public function getElement() : String;
	
	@:overload public function getNamespace() : String;
	
	
}
