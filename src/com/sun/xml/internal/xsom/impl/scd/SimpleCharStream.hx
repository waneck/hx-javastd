package com.sun.xml.internal.xsom.impl.scd;
/*
* Copyright (c) 1997, 2010, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 4.0 */
/**
* An implementation of interface CharStream, where the stream is assumed to
* contain only ASCII characters (without unicode processing).
*/
extern class SimpleCharStream
{
	@:public @:static @:final public static var staticFlag(default, null) : Bool;
	
	@:public public var bufpos : Int;
	
	@:protected private var bufline : java.NativeArray<Int>;
	
	@:protected private var bufcolumn : java.NativeArray<Int>;
	
	@:protected private var column : Int;
	
	@:protected private var line : Int;
	
	@:protected private var prevCharIsCR : Bool;
	
	@:protected private var prevCharIsLF : Bool;
	
	@:protected private var inputStream : java.io.Reader;
	
	@:protected private var buffer : java.NativeArray<java.StdTypes.Char16>;
	
	@:protected private var maxNextCharInd : Int;
	
	@:protected private var inBuf : Int;
	
	@:protected private var tabSize : Int;
	
	@:overload @:protected private function setTabSize(i : Int) : Void;
	
	@:overload @:protected private function getTabSize(i : Int) : Int;
	
	@:overload @:protected private function ExpandBuff(wrapAround : Bool) : Void;
	
	@:overload @:protected private function FillBuff() : Void;
	
	@:overload @:public public function BeginToken() : java.StdTypes.Char16;
	
	@:overload @:protected private function UpdateLineColumn(c : java.StdTypes.Char16) : Void;
	
	@:overload @:public public function readChar() : java.StdTypes.Char16;
	
	/**
	* @deprecated
	* @see #getEndColumn
	*/
	@:overload @:public public function getColumn() : Int;
	
	/**
	* @deprecated
	* @see #getEndLine
	*/
	@:overload @:public public function getLine() : Int;
	
	@:overload @:public public function getEndColumn() : Int;
	
	@:overload @:public public function getEndLine() : Int;
	
	@:overload @:public public function getBeginColumn() : Int;
	
	@:overload @:public public function getBeginLine() : Int;
	
	@:overload @:public public function backup(amount : Int) : Void;
	
	@:overload @:public public function new(dstream : java.io.Reader, startline : Int, startcolumn : Int, buffersize : Int) : Void;
	
	@:overload @:public public function new(dstream : java.io.Reader, startline : Int, startcolumn : Int) : Void;
	
	@:overload @:public public function new(dstream : java.io.Reader) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.Reader, startline : Int, startcolumn : Int, buffersize : Int) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.Reader, startline : Int, startcolumn : Int) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.Reader) : Void;
	
	@:overload @:public public function new(dstream : java.io.InputStream, encoding : String, startline : Int, startcolumn : Int, buffersize : Int) : Void;
	
	@:overload @:public public function new(dstream : java.io.InputStream, startline : Int, startcolumn : Int, buffersize : Int) : Void;
	
	@:overload @:public public function new(dstream : java.io.InputStream, encoding : String, startline : Int, startcolumn : Int) : Void;
	
	@:overload @:public public function new(dstream : java.io.InputStream, startline : Int, startcolumn : Int) : Void;
	
	@:overload @:public public function new(dstream : java.io.InputStream, encoding : String) : Void;
	
	@:overload @:public public function new(dstream : java.io.InputStream) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.InputStream, encoding : String, startline : Int, startcolumn : Int, buffersize : Int) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.InputStream, startline : Int, startcolumn : Int, buffersize : Int) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.InputStream, encoding : String) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.InputStream) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.InputStream, encoding : String, startline : Int, startcolumn : Int) : Void;
	
	@:overload @:public public function ReInit(dstream : java.io.InputStream, startline : Int, startcolumn : Int) : Void;
	
	@:overload @:public public function GetImage() : String;
	
	@:overload @:public public function GetSuffix(len : Int) : java.NativeArray<java.StdTypes.Char16>;
	
	@:overload @:public public function Done() : Void;
	
	/**
	* Method to adjust line and column numbers for the start of a token.
	*/
	@:overload @:public public function adjustBeginLineColumn(newLine : Int, newCol : Int) : Void;
	
	
}
