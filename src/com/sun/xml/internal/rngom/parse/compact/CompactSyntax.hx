package com.sun.xml.internal.rngom.parse.compact;
/*
* Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/*
* Copyright (C) 2004-2011
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/
/* Generated By:JavaCC: Do not edit this line. CompactSyntax.java */
extern class CompactSyntax implements com.sun.xml.internal.rngom.parse.Context implements com.sun.xml.internal.rngom.parse.compact.CompactSyntaxConstants
{
	@:overload @:public public function new(parseable : com.sun.xml.internal.rngom.parse.compact.CompactParseable, r : java.io.Reader, sourceUri : String, sb : com.sun.xml.internal.rngom.ast.builder.SchemaBuilder<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, eh : org.xml.sax.ErrorHandler, inheritedNs : String) : Void;
	
	@:overload @:public public function resolveNamespacePrefix(prefix : String) : String;
	
	@:overload @:public public function prefixes() : java.util.Enumeration<Dynamic>;
	
	@:overload @:public public function getBaseUri() : String;
	
	@:overload @:public public function isUnparsedEntity(entityName : String) : Bool;
	
	@:overload @:public public function isNotation(notationName : String) : Bool;
	
	@:overload @:public public function copy() : com.sun.xml.internal.rngom.parse.Context;
	
	@:overload @:final @:public public function Input(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function TopLevelLookahead() : Void;
	
	@:overload @:final @:public public function LookaheadAfterAnnotations() : Void;
	
	@:overload @:final @:public public function LookaheadGrammarKeyword() : Void;
	
	@:overload @:final @:public public function LookaheadDocumentation() : Void;
	
	@:overload @:final @:public public function LookaheadBody() : Void;
	
	@:overload @:final @:public public function IncludedGrammar(g : com.sun.xml.internal.rngom.ast.builder.IncludedGrammar<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function TopLevelGrammar(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function Preamble() : Void;
	
	@:overload @:final @:public public function NamespaceDecl() : Void;
	
	@:overload @:final @:public public function NamespaceName() : String;
	
	@:overload @:final @:public public function DatatypesDecl() : Void;
	
	@:overload @:final @:public public function AnnotatedPrimaryExpr(topLevel : Bool, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, except : java.NativeArray<com.sun.xml.internal.rngom.parse.compact.Token>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function PrimaryExpr(topLevel : Bool, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>, except : java.NativeArray<com.sun.xml.internal.rngom.parse.compact.Token>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function EmptyExpr(a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function TextExpr(a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function NotAllowedExpr(a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function Expr(topLevel : Bool, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, t : com.sun.xml.internal.rngom.parse.compact.Token, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function UnaryExpr(topLevel : Bool, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, hadOccur : java.NativeArray<Bool>, except : java.NativeArray<com.sun.xml.internal.rngom.parse.compact.Token>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function ElementExpr(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function AttributeExpr(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function NameClass(context : Int, pa : java.NativeArray<com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function AnnotateAfter(nc : com.sun.xml.internal.rngom.ast.om.ParsedNameClass) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function NameClassAlternatives(context : Int, nc : com.sun.xml.internal.rngom.ast.om.ParsedNameClass, pa : java.NativeArray<com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function BasicNameClass(context : Int) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function PrimaryNameClass(context : Int, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function OpenNameClass(context : Int, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function UnprefixedNameClass(context : Int, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function PrefixedNameClass(a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function NsNameExceptClass(context : Int, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>, pa : java.NativeArray<com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function NsName() : com.sun.xml.internal.rngom.parse.compact.CompactSyntax.CompactSyntax_LocatedString;
	
	@:overload @:final @:public public function AnyNameExceptClass(context : Int, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>, pa : java.NativeArray<com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function ParenNameClass(context : Int, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function ExceptNameClass(context : Int) : com.sun.xml.internal.rngom.ast.om.ParsedNameClass;
	
	@:overload @:final @:public public function ListExpr(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function MixedExpr(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function GrammarExpr(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function ParenExpr(topLevel : Bool, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function GrammarBody(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>;
	
	@:overload @:final @:public public function GrammarComponent(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function Definition(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function Start(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function Define(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function AssignOp() : com.sun.xml.internal.rngom.ast.builder.GrammarSection.GrammarSection_Combine;
	
	@:overload @:final @:public public function Include(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function IncludeBody(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>;
	
	@:overload @:final @:public public function IncludeComponent(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function Div(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function IncludeDiv(section : com.sun.xml.internal.rngom.ast.builder.GrammarSection<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function ExternalRefExpr(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function Inherit() : String;
	
	@:overload @:final @:public public function ParentExpr(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function IdentifierExpr(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function ValueExpr(topLevel : Bool, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function DataExpr(topLevel : Bool, scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>, except : java.NativeArray<com.sun.xml.internal.rngom.parse.compact.Token>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function DatatypeName() : com.sun.xml.internal.rngom.parse.compact.Token;
	
	@:overload @:final @:public public function Identifier() : com.sun.xml.internal.rngom.parse.compact.CompactSyntax.CompactSyntax_LocatedString;
	
	@:overload @:final @:public public function Prefix() : String;
	
	@:overload @:final @:public public function UnprefixedName() : com.sun.xml.internal.rngom.parse.compact.CompactSyntax.CompactSyntax_LocatedString;
	
	@:overload @:final @:public public function Params(dpb : com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function Param(dpb : com.sun.xml.internal.rngom.ast.builder.DataPatternBuilder<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function Except(scope : com.sun.xml.internal.rngom.ast.builder.Scope<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>, except : java.NativeArray<com.sun.xml.internal.rngom.parse.compact.Token>) : com.sun.xml.internal.rngom.ast.om.ParsedPattern;
	
	@:overload @:final @:public public function Documentation() : com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation;
	
	@:overload @:final @:public public function Annotations() : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>;
	
	@:overload @:final @:public public function AnnotationAttribute(a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function PrefixedAnnotationAttribute(a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>, nested : Bool) : Void;
	
	@:overload @:final @:public public function UnprefixedAnnotationAttribute(a : com.sun.xml.internal.rngom.ast.builder.Annotations<Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function AnnotationElement(nested : Bool) : com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation;
	
	@:overload @:final @:public public function AnnotationElementNotKeyword() : com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation;
	
	@:overload @:final @:public public function PrefixedAnnotationElement(nested : Bool) : com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation;
	
	@:overload @:final @:public public function UnprefixedAnnotationElement() : com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation;
	
	@:overload @:final @:public public function IdentifierAnnotationElement() : com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation;
	
	@:overload @:final @:public public function AnnotationElementContent(eab : com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function AnnotationElementLiteral(eab : com.sun.xml.internal.rngom.ast.builder.ElementAnnotationBuilder<Dynamic, Dynamic, Dynamic, Dynamic, Dynamic>) : Void;
	
	@:overload @:final @:public public function Literal() : String;
	
	@:overload @:final @:public public function LocatedLiteral() : com.sun.xml.internal.rngom.parse.compact.CompactSyntax.CompactSyntax_LocatedString;
	
	@:overload @:final @:public public function Keyword() : com.sun.xml.internal.rngom.parse.compact.Token;
	
	/** Generated Token Manager. */
	@:public public var token_source : com.sun.xml.internal.rngom.parse.compact.CompactSyntaxTokenManager;
	
	/** Current token. */
	@:public public var token : com.sun.xml.internal.rngom.parse.compact.Token;
	
	/** Next token. */
	@:public public var jj_nt : com.sun.xml.internal.rngom.parse.compact.Token;
	
	/** Constructor with InputStream. */
	@:overload @:public public function new(stream : java.io.InputStream) : Void;
	
	/** Constructor with InputStream and supplied encoding */
	@:overload @:public public function new(stream : java.io.InputStream, encoding : String) : Void;
	
	/** Reinitialise. */
	@:overload @:public public function ReInit(stream : java.io.InputStream) : Void;
	
	/** Reinitialise. */
	@:overload @:public public function ReInit(stream : java.io.InputStream, encoding : String) : Void;
	
	/** Constructor. */
	@:overload @:public public function new(stream : java.io.Reader) : Void;
	
	/** Reinitialise. */
	@:overload @:public public function ReInit(stream : java.io.Reader) : Void;
	
	/** Constructor with generated Token Manager. */
	@:overload @:public public function new(tm : com.sun.xml.internal.rngom.parse.compact.CompactSyntaxTokenManager) : Void;
	
	/** Reinitialise. */
	@:overload @:public public function ReInit(tm : com.sun.xml.internal.rngom.parse.compact.CompactSyntaxTokenManager) : Void;
	
	/** Get the next Token. */
	@:overload @:final @:public public function getNextToken() : com.sun.xml.internal.rngom.parse.compact.Token;
	
	/** Get the specific Token. */
	@:overload @:final @:public public function getToken(index : Int) : com.sun.xml.internal.rngom.parse.compact.Token;
	
	/** Generate ParseException. */
	@:overload @:public public function generateParseException() : com.sun.xml.internal.rngom.parse.compact.ParseException;
	
	/** Enable tracing. */
	@:overload @:final @:public public function enable_tracing() : Void;
	
	/** Disable tracing. */
	@:overload @:final @:public public function disable_tracing() : Void;
	
	
}
@:native('com$sun$xml$internal$rngom$parse$compact$CompactSyntax$LocatedString') @:internal extern class CompactSyntax_LocatedString
{
	
}
@:native('com$sun$xml$internal$rngom$parse$compact$CompactSyntax$LookaheadSuccess') @:internal extern class CompactSyntax_LookaheadSuccess extends java.lang.Error
{
	
}
@:native('com$sun$xml$internal$rngom$parse$compact$CompactSyntax$JJCalls') @:internal extern class CompactSyntax_JJCalls
{
	
}
