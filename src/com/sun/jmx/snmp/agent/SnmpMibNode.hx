package com.sun.jmx.snmp.agent;
/*
* Copyright (c) 1997, 2007, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
//// java imports
////
//// jmx imports
////
/**
* The <CODE>SnmpMibNode</CODE> class represents a node in an SNMP MIB.
* <P>
* This class is used internally and by the class generated by
* <CODE>mibgen</CODE>.
* You should not need to use this class directly.
*
* <p><b>This API is a Sun Microsystems internal API  and is subject
* to change without notice.</b></p>
*/
extern class SnmpMibNode implements java.io.Serializable.Serializable
{
	/**
	* Get the next OID arc corresponding to a readable scalar variable,
	* a branch leading to a subgroub, or a table.
	*
	* @param id Id we start from looking for the next.
	* @param userData A contextual object containing user-data.
	*        This object is allocated through the <code>
	*        {@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}</code>
	*        for each incoming SNMP request.
	*
	* @return The next id in this group.
	*
	* @exception SnmpStatusException If no id is found after the given id.
	*/
	@:overload public function getNextVarId(id : haxe.Int64, userData : java.lang.Object.Object) : haxe.Int64;
	
	/**
	* Get the next OID arc corresponding to a readable scalar variable,
	* a branch leading to a subgroub, or a table, possibly skipping over
	* those arcs that must not or cannot be returned.
	*
	* Calls {@link #getNextVarId(long,java.lang.Object)} until
	* {@link #skipVariable(long,java.lang.Object,int)} returns false.
	*
	* @param id Id we start from looking for the next.
	* @param userData A contextual object containing user-data.
	*        This object is allocated through the <code>
	*        {@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}</code>
	*        for each incoming SNMP request.
	* @param pduVersion Protocol version of the original request PDU.
	*
	* @return The next id in this group which can be returned using
	*         the given PDU's protocol version.
	*
	* @exception SnmpStatusException If no id is found after the given id.
	*/
	@:overload public function getNextVarId(id : haxe.Int64, userData : java.lang.Object.Object, pduVersion : Int) : haxe.Int64;
	
	/**
	* Hook for subclasses.
	* The default implementation of this method is to always return
	* false. Subclasses should redefine this method so that it returns
	* true when:
	* <ul><li>the variable is a leaf that is not instantiated,</li>
	* <li>or the variable is a leaf whose type cannot be returned by that
	*     version of the protocol (e.g. an Counter64 with SNMPv1).</li>
	* </ul>
	*
	* @param id Id we start from looking for the next.
	* @param userData A contextual object containing user-data.
	*        This object is allocated through the <code>
	*        {@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}</code>
	*        for each incoming SNMP request.
	* @param pduVersion Protocol version of the original request PDU.
	*
	* @return true if the variable must be skipped by the get-next
	*         algorithm.
	*/
	@:overload private function skipVariable(id : haxe.Int64, userData : java.lang.Object.Object, pduVersion : Int) : Bool;
	
	/**
	* Generic handling of the <CODE>get</CODE> operation.
	*
	* <p> You can override this method if you need to implement some
	* specific policies for minimizing the accesses made to some remote
	* underlying resources.
	* <p>
	*
	* @param req   The sub-request that must be handled by this node.
	*
	* @param depth The depth reached in the OID tree.
	*
	* @exception SnmpStatusException An error occurred while accessing
	*  the MIB node.
	*/
	@:overload @:abstract public function get(req : com.sun.jmx.snmp.agent.SnmpMibSubRequest.SnmpMibSubRequest, depth : Int) : Void;
	
	/**
	* Generic handling of the <CODE>set</CODE> operation.
	* <p> You can override this method if you need to implement some
	* specific policies for minimizing the accesses made to some remote
	* underlying resources.
	* <p>
	*
	* @param req   The sub-request that must be handled by this node.
	*
	* @param depth The depth reached in the OID tree.
	*
	* @exception SnmpStatusException An error occurred while accessing
	*  the MIB node.
	*/
	@:overload @:abstract public function set(req : com.sun.jmx.snmp.agent.SnmpMibSubRequest.SnmpMibSubRequest, depth : Int) : Void;
	
	/**
	* Generic handling of the <CODE>check</CODE> operation.
	* <p> You can override this method if you need to implement some
	* specific policies for minimizing the accesses made to some remote
	* underlying resources, or if you need to implement some consistency
	* checks between the different values provided in the varbind list.
	* <p>
	*
	* @param req   The sub-request that must be handled by this node.
	*
	* @param depth The depth reached in the OID tree.
	*
	* @exception SnmpStatusException An error occurred while accessing
	*  the MIB node.
	*/
	@:overload @:abstract public function check(req : com.sun.jmx.snmp.agent.SnmpMibSubRequest.SnmpMibSubRequest, depth : Int) : Void;
	
	/**
	* Sorts the specified integer array.
	*
	* @param array An integer array.
	*/
	@:overload public static function sort(array : java.NativeArray<Int>) : Void;
	
	/**
	* Computes the root OID of the MIB.
	*/
	@:overload public function getRootOid(result : java.util.Vector.Vector<java.lang.Integer.Integer>) : Void;
	
	/**
	* This will give the first element greater than <CODE>value</CODE>
	* in a sorted array.
	* If there is no element of the array greater than <CODE>value</CODE>,
	* the method will throw a <CODE>SnmpStatusException</CODE>.
	*
	* @param table A sorted integer array.
	*
	* @param value The greatest value.
	*
	* @exception SnmpStatusException If there is no element greater than
	*     <CODE>value</CODE>.
	*/
	@:overload @:final private static function getNextIdentifier(table : java.NativeArray<Int>, value : haxe.Int64) : Int;
	
	/**
	* Contains the list of variable identifiers.
	*/
	private var varList : java.NativeArray<Int>;
	
	/**
	* Contains a predefined exception that is often fired when an
	* object is not found in the MIB.
	*/
	private static var noSuchInstanceException(default, null) : com.sun.jmx.snmp.SnmpStatusException.SnmpStatusException;
	
	private static var noSuchObjectException(default, null) : com.sun.jmx.snmp.SnmpStatusException.SnmpStatusException;
	
	private static var noSuchNameException(default, null) : com.sun.jmx.snmp.SnmpStatusException.SnmpStatusException;
	
	
}
