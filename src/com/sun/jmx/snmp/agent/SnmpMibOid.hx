package com.sun.jmx.snmp.agent;
/*
* Copyright (c) 1997, 2007, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
//// java imports
////
//// jmx imports
////
/**
* Represents a node in an SNMP MIB which is neither a group nor a variable.
* This class defines a list of sub-nodes and the methods that allow to
* manipulate the sub-nodes.
* <P>
* This class is used internally and by the class generated by
* <CODE>mibgen</CODE>.
* You should not need to use this class directly.
*
* <p><b>This API is a Sun Microsystems internal API  and is subject
* to change without notice.</b></p>
*/
extern class SnmpMibOid extends com.sun.jmx.snmp.agent.SnmpMibNode.SnmpMibNode implements java.io.Serializable.Serializable
{
	/**
	* Default constructor.
	*/
	@:overload public function new() : Void;
	
	/**
	* Generic handling of the <CODE>get</CODE> operation.
	*
	* <p> This method should be overridden in subclasses.
	* <p>
	*
	* @param req   The sub-request that must be handled by this node.
	*
	* @param depth The depth reached in the OID tree.
	*
	* @exception SnmpStatusException The default implementation (if not
	*            overridden) is to generate a SnmpStatusException.
	*/
	@:overload override public function get(req : com.sun.jmx.snmp.agent.SnmpMibSubRequest.SnmpMibSubRequest, depth : Int) : Void;
	
	/**
	* Generic handling of the <CODE>set</CODE> operation.
	*
	* <p> This method should be overridden in subclasses.
	* <p>
	*
	* @param req   The sub-request that must be handled by this node.
	*
	* @param depth The depth reached in the OID tree.
	*
	* @exception SnmpStatusException The default implementation (if not
	*            overridden) is to generate a SnmpStatusException.
	*/
	@:overload override public function set(req : com.sun.jmx.snmp.agent.SnmpMibSubRequest.SnmpMibSubRequest, depth : Int) : Void;
	
	/**
	* Generic handling of the <CODE>check</CODE> operation.
	*
	* <p> This method should be overridden in subclasses.
	* <p>
	*
	* @param req   The sub-request that must be handled by this node.
	*
	* @param depth The depth reached in the OID tree.
	*
	* @exception SnmpStatusException The default implementation (if not
	*            overriden) is to generate a SnmpStatusException.
	*/
	@:overload override public function check(req : com.sun.jmx.snmp.agent.SnmpMibSubRequest.SnmpMibSubRequest, depth : Int) : Void;
	
	/**
	* Computes the root OID of the MIB.
	*/
	@:overload override public function getRootOid(result : java.util.Vector.Vector<java.lang.Integer.Integer>) : Void;
	
	/**
	* Registers a specific node in the tree.
	*/
	@:overload public function registerNode(oidString : java.lang.String.String, node : com.sun.jmx.snmp.agent.SnmpMibNode.SnmpMibNode) : Void;
	
	
}
@:native('com$sun$jmx$snmp$agent$SnmpMibOid$NonSyncVector') @:internal extern class SnmpMibOid_NonSyncVector<E> extends java.util.Vector.Vector<E>
{
	@:overload public function new(size : Int) : Void;
	
	
}
