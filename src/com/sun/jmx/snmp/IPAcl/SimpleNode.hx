package com.sun.jmx.snmp.IPAcl;
/*
* Copyright (c) 1997, 2007, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/* Generated By:JJTree: Do not edit this line. SimpleNode.java */
@:internal extern class SimpleNode implements com.sun.jmx.snmp.IPAcl.Node.Node
{
	private var parent : com.sun.jmx.snmp.IPAcl.Node.Node;
	
	private var children : java.NativeArray<com.sun.jmx.snmp.IPAcl.Node.Node>;
	
	private var id : Int;
	
	private var parser : com.sun.jmx.snmp.IPAcl.Parser.Parser;
	
	@:overload public function new(i : Int) : Void;
	
	@:overload public function new(p : com.sun.jmx.snmp.IPAcl.Parser.Parser, i : Int) : Void;
	
	@:overload public static function jjtCreate(id : Int) : com.sun.jmx.snmp.IPAcl.Node.Node;
	
	@:overload public static function jjtCreate(p : com.sun.jmx.snmp.IPAcl.Parser.Parser, id : Int) : com.sun.jmx.snmp.IPAcl.Node.Node;
	
	@:overload public function jjtOpen() : Void;
	
	@:overload public function jjtClose() : Void;
	
	@:overload public function jjtSetParent(n : com.sun.jmx.snmp.IPAcl.Node.Node) : Void;
	
	@:overload public function jjtGetParent() : com.sun.jmx.snmp.IPAcl.Node.Node;
	
	@:overload public function jjtAddChild(n : com.sun.jmx.snmp.IPAcl.Node.Node, i : Int) : Void;
	
	@:overload public function jjtGetChild(i : Int) : com.sun.jmx.snmp.IPAcl.Node.Node;
	
	@:overload public function jjtGetNumChildren() : Int;
	
	/**
	* Build the Trap entries from the syntactic tree.
	*/
	@:overload public function buildTrapEntries(dest : java.util.Hashtable.Hashtable<java.net.InetAddress.InetAddress, java.util.Vector.Vector<java.lang.String.String>>) : Void;
	
	/**
	* Build the Inform entries from the syntactic tree.
	*/
	@:overload public function buildInformEntries(dest : java.util.Hashtable.Hashtable<java.net.InetAddress.InetAddress, java.util.Vector.Vector<java.lang.String.String>>) : Void;
	
	/**
	* Build the Acl entries from the syntactic tree.
	*/
	@:overload public function buildAclEntries(owner : com.sun.jmx.snmp.IPAcl.PrincipalImpl.PrincipalImpl, acl : com.sun.jmx.snmp.IPAcl.AclImpl.AclImpl) : Void;
	
	/* You can override these two methods in subclasses of SimpleNode to
	customize the way the node appears when the tree is dumped.  If
	your output uses more than one line you should override
	toString(String), otherwise overriding toString() is probably all
	you need to do. */
	@:overload public function toString() : java.lang.String.String;
	
	@:overload public function toString(prefix : java.lang.String.String) : java.lang.String.String;
	
	/* Override this method if you want to customize how the node dumps
	out its children. */
	@:overload public function dump(prefix : java.lang.String.String) : Void;
	
	
}
