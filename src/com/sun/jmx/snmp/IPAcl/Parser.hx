package com.sun.jmx.snmp.IPAcl;
/*
* Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
@:internal extern class Parser implements com.sun.jmx.snmp.IPAcl.ParserTreeConstants.ParserTreeConstants implements com.sun.jmx.snmp.IPAcl.ParserConstants.ParserConstants
{
	/*@bgen(jjtree)*/
	private var jjtree : com.sun.jmx.snmp.IPAcl.JJTParserState.JJTParserState;
	
	@:overload @:final public function SecurityDefs() : com.sun.jmx.snmp.IPAcl.JDMSecurityDefs.JDMSecurityDefs;
	
	@:overload @:final public function AclBlock() : Void;
	
	@:overload @:final public function AclItem() : Void;
	
	@:overload @:final public function Communities() : com.sun.jmx.snmp.IPAcl.JDMCommunities.JDMCommunities;
	
	@:overload @:final public function Community() : Void;
	
	@:overload @:final public function Access() : com.sun.jmx.snmp.IPAcl.JDMAccess.JDMAccess;
	
	@:overload @:final public function Managers() : Void;
	
	@:overload @:final public function Host() : Void;
	
	@:overload @:final public function HostName() : Void;
	
	@:overload @:final public function IpAddress() : Void;
	
	@:overload @:final public function IpV6Address() : Void;
	
	@:overload @:final public function IpMask() : Void;
	
	@:overload @:final public function NetMask() : Void;
	
	@:overload @:final public function NetMaskV6() : Void;
	
	@:overload @:final public function TrapBlock() : Void;
	
	@:overload @:final public function TrapItem() : Void;
	
	@:overload @:final public function TrapCommunity() : com.sun.jmx.snmp.IPAcl.JDMTrapCommunity.JDMTrapCommunity;
	
	@:overload @:final public function TrapInterestedHost() : Void;
	
	@:overload @:final public function HostTrap() : Void;
	
	@:overload @:final public function Enterprise() : Void;
	
	@:overload @:final public function TrapNum() : Void;
	
	@:overload @:final public function InformBlock() : Void;
	
	@:overload @:final public function InformItem() : Void;
	
	@:overload @:final public function InformCommunity() : com.sun.jmx.snmp.IPAcl.JDMInformCommunity.JDMInformCommunity;
	
	@:overload @:final public function InformInterestedHost() : Void;
	
	@:overload @:final public function HostInform() : Void;
	
	public var token_source : com.sun.jmx.snmp.IPAcl.ParserTokenManager.ParserTokenManager;
	
	public var token : com.sun.jmx.snmp.IPAcl.Token.Token;
	
	public var lookingAhead : Bool;
	
	@:overload public function new(stream : java.io.InputStream) : Void;
	
	@:overload public function ReInit(stream : java.io.InputStream) : Void;
	
	@:overload public function new(stream : java.io.Reader) : Void;
	
	@:overload public function ReInit(stream : java.io.Reader) : Void;
	
	@:overload public function new(tm : com.sun.jmx.snmp.IPAcl.ParserTokenManager.ParserTokenManager) : Void;
	
	@:overload public function ReInit(tm : com.sun.jmx.snmp.IPAcl.ParserTokenManager.ParserTokenManager) : Void;
	
	@:overload @:final public function getNextToken() : com.sun.jmx.snmp.IPAcl.Token.Token;
	
	@:overload @:final public function getToken(index : Int) : com.sun.jmx.snmp.IPAcl.Token.Token;
	
	@:overload @:final public function generateParseException() : com.sun.jmx.snmp.IPAcl.ParseException.ParseException;
	
	@:overload @:final public function enable_tracing() : Void;
	
	@:overload @:final public function disable_tracing() : Void;
	
	
}
@:native('com$sun$jmx$snmp$IPAcl$Parser$JJCalls') @:internal extern class Parser_JJCalls
{
	
}
