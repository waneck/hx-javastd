package com.sun.tools.example.debug.expr;
/*
* Copyright (c) 1999, 2001, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/*
* This source code is provided to illustrate the usage of a given feature
* or technique and has been deliberately simplified. Additional steps
* required for a production-quality application, such as security checks,
* input validation and proper error handling, might not be present in
* this sample code.
*/
/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 0.7pre6 */
/**
* This exception is thrown when parse errors are encountered.
* You can explicitly create objects of this exception type by
* calling the method generateParseException in the generated
* parser.
*
* You can modify this class to customize your error reporting
* mechanisms so long as you retain the public fields.
*/
extern class ParseException extends java.lang.Exception
{
	/**
	* This constructor is used by the method "generateParseException"
	* in the generated parser.  Calling this constructor generates
	* a new object of this type with the fields "currentToken",
	* "expectedTokenSequences", and "tokenImage" set.  The boolean
	* flag "specialConstructor" is also set to true to indicate that
	* this constructor was used to create this object.
	* This constructor calls its super class with the empty string
	* to force the "toString" method of parent class "Throwable" to
	* print the error message in the form:
	*     ParseException: <result of getMessage>
	*/
	@:overload @:public public function new(currentTokenVal : com.sun.tools.example.debug.expr.Token, expectedTokenSequencesVal : java.NativeArray<java.NativeArray<Int>>, tokenImageVal : java.NativeArray<String>) : Void;
	
	/**
	* The following constructors are for use by you for whatever
	* purpose you can think of.  Constructing the exception in this
	* manner makes the exception behave in the normal way - i.e., as
	* documented in the class "Throwable".  The fields "errorToken",
	* "expectedTokenSequences", and "tokenImage" do not contain
	* relevant information.  The JavaCC generated code does not use
	* these constructors.
	*/
	@:overload @:public public function new() : Void;
	
	@:overload @:public public function new(message : String) : Void;
	
	/**
	* This variable determines which constructor was used to create
	* this object and thereby affects the semantics of the
	* "getMessage" method (see below).
	*/
	@:protected private var specialConstructor : Bool;
	
	/**
	* This is the last token that has been consumed successfully.  If
	* this object has been created due to a parse error, the token
	* followng this token will (therefore) be the first error token.
	*/
	@:public public var currentToken : com.sun.tools.example.debug.expr.Token;
	
	/**
	* Each entry in this array is an array of integers.  Each array
	* of integers represents a sequence of tokens (by their ordinal
	* values) that is expected at this point of the parse.
	*/
	@:public public var expectedTokenSequences : java.NativeArray<java.NativeArray<Int>>;
	
	/**
	* This is a reference to the "tokenImage" array of the generated
	* parser within which the parse error occurred.  This array is
	* defined in the generated ...Constants interface.
	*/
	@:public public var tokenImage : java.NativeArray<String>;
	
	/**
	* This method has the standard behavior when this object has been
	* created using the standard constructors.  Otherwise, it uses
	* "currentToken" and "expectedTokenSequences" to generate a parse
	* error message and returns it.  If this object has been created
	* due to a parse error, and you do not catch it (it gets thrown
	* from the parser), then this method is called during the printing
	* of the final stack trace, and hence the correct error message
	* gets displayed.
	*/
	@:overload @:public override public function getMessage() : String;
	
	/**
	* The end of line string for this machine.
	*/
	@:protected private var eol : String;
	
	/**
	* Used to convert raw characters to their escaped version
	* when these raw version cannot be used as part of an ASCII
	* string literal.
	*/
	@:overload @:protected private function add_escapes(str : String) : String;
	
	
}
