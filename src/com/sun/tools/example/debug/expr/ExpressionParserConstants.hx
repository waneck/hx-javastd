package com.sun.tools.example.debug.expr;
/*
* Copyright (c) 1999, 2001, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/*
* This source code is provided to illustrate the usage of a given feature
* or technique and has been deliberately simplified. Additional steps
* required for a production-quality application, such as security checks,
* input validation and proper error handling, might not be present in
* this sample code.
*/
/* Generated By:JavaCC: Do not edit this line. ExpressionParserConstants.java */
extern interface ExpressionParserConstants
{
	public var EOF : Int;
	
	public var SINGLE_LINE_COMMENT : Int;
	
	public var FORMAL_COMMENT : Int;
	
	public var MULTI_LINE_COMMENT : Int;
	
	public var ABSTRACT : Int;
	
	public var BOOLEAN : Int;
	
	public var BREAK : Int;
	
	public var BYTE : Int;
	
	public var CASE : Int;
	
	public var CATCH : Int;
	
	public var CHAR : Int;
	
	public var CLASS : Int;
	
	public var CONST : Int;
	
	public var CONTINUE : Int;
	
	public var _DEFAULT : Int;
	
	public var DO : Int;
	
	public var DOUBLE : Int;
	
	public var ELSE : Int;
	
	public var EXTENDS : Int;
	
	public var FALSE : Int;
	
	public var FINAL : Int;
	
	public var FINALLY : Int;
	
	public var FLOAT : Int;
	
	public var FOR : Int;
	
	public var GOTO : Int;
	
	public var IF : Int;
	
	public var IMPLEMENTS : Int;
	
	public var IMPORT : Int;
	
	public var INSTANCEOF : Int;
	
	public var INT : Int;
	
	public var INTERFACE : Int;
	
	public var LONG : Int;
	
	public var NATIVE : Int;
	
	public var NEW : Int;
	
	public var NULL : Int;
	
	public var PACKAGE : Int;
	
	public var PRIVATE : Int;
	
	public var PROTECTED : Int;
	
	public var PUBLIC : Int;
	
	public var RETURN : Int;
	
	public var SHORT : Int;
	
	public var STATIC : Int;
	
	public var SUPER : Int;
	
	public var SWITCH : Int;
	
	public var SYNCHRONIZED : Int;
	
	public var THIS : Int;
	
	public var THROW : Int;
	
	public var THROWS : Int;
	
	public var TRANSIENT : Int;
	
	public var TRUE : Int;
	
	public var TRY : Int;
	
	public var VOID : Int;
	
	public var VOLATILE : Int;
	
	public var WHILE : Int;
	
	public var INTEGER_LITERAL : Int;
	
	public var DECIMAL_LITERAL : Int;
	
	public var HEX_LITERAL : Int;
	
	public var OCTAL_LITERAL : Int;
	
	public var FLOATING_POINT_LITERAL : Int;
	
	public var EXPONENT : Int;
	
	public var CHARACTER_LITERAL : Int;
	
	public var STRING_LITERAL : Int;
	
	public var IDENTIFIER : Int;
	
	public var LETTER : Int;
	
	public var DIGIT : Int;
	
	public var LPAREN : Int;
	
	public var RPAREN : Int;
	
	public var LBRACE : Int;
	
	public var RBRACE : Int;
	
	public var LBRACKET : Int;
	
	public var RBRACKET : Int;
	
	public var SEMICOLON : Int;
	
	public var COMMA : Int;
	
	public var DOT : Int;
	
	public var ASSIGN : Int;
	
	public var GT : Int;
	
	public var LT : Int;
	
	public var BANG : Int;
	
	public var TILDE : Int;
	
	public var HOOK : Int;
	
	public var COLON : Int;
	
	public var EQ : Int;
	
	public var LE : Int;
	
	public var GE : Int;
	
	public var NE : Int;
	
	public var SC_OR : Int;
	
	public var SC_AND : Int;
	
	public var INCR : Int;
	
	public var DECR : Int;
	
	public var PLUS : Int;
	
	public var MINUS : Int;
	
	public var STAR : Int;
	
	public var SLASH : Int;
	
	public var BIT_AND : Int;
	
	public var BIT_OR : Int;
	
	public var XOR : Int;
	
	public var REM : Int;
	
	public var LSHIFT : Int;
	
	public var RSIGNEDSHIFT : Int;
	
	public var RUNSIGNEDSHIFT : Int;
	
	public var PLUSASSIGN : Int;
	
	public var MINUSASSIGN : Int;
	
	public var STARASSIGN : Int;
	
	public var SLASHASSIGN : Int;
	
	public var ANDASSIGN : Int;
	
	public var ORASSIGN : Int;
	
	public var XORASSIGN : Int;
	
	public var REMASSIGN : Int;
	
	public var LSHIFTASSIGN : Int;
	
	public var RSIGNEDSHIFTASSIGN : Int;
	
	public var RUNSIGNEDSHIFTASSIGN : Int;
	
	public var DEFAULT : Int;
	
	public var tokenImage : java.NativeArray<String>;
	
	
}
