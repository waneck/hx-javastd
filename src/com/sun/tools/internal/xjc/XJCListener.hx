package com.sun.tools.internal.xjc;
/*
* Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
extern class XJCListener implements com.sun.xml.internal.bind.api.ErrorListener
{
	/**
	* @deprecated
	*      Override {@link #generatedFile(String, int, int)}.
	*      Deprecated in 2.0.1.
	*/
	@:overload public function generatedFile(fileName : String) : Void;
	
	/**
	* Called for each file generated by XJC.
	*
	* <p>
	* XJC may generate not only source files but also resources files.
	* The file name includes the path portions that correspond with the package name.
	*
	* <p>
	* When generating files into a directory, file names will be relative to the
	* output directory. When generating files into a zip file, file names will be
	* those in the zip file.
	*
	* @param fileName
	*      file names like "org/acme/foo/Foo.java" or "org/acme/foo/jaxb.properties".
	*
	* @since 2.0.1
	*/
	@:require(java0) @:overload public function generatedFile(fileName : String, current : Int, total : Int) : Void;
	
	/**
	* Other miscellenous messages that do not have structures
	* will be reported through this method.
	*
	* This method is used like {@link PrintStream#println(String)}.
	* The callee is expected to add '\n'.
	*/
	@:overload public function message(msg : String) : Void;
	
	/**
	* Called after the schema is compiled and the code generation strategy is determined,
	* but before any code is actually generated as files.
	*
	* @param outline
	*      never null. this is the root object that represents the code generation strategy.
	*/
	@:overload public function compiled(outline : com.sun.tools.internal.xjc.outline.Outline) : Void;
	
	/**
	* XJC will periodically invoke this method to see if it should cancel a compilation.
	*
	* <p>
	* As long as this method returns false, XJC will keep going. If this method ever returns
	* true, XJC will abort the processing right away and
	* returns non-zero from {@link Driver#run(String[], XJCListener)}.
	* Note that XJC will not report an abortion through the {@link #message(String)} method.
	*
	* <p>
	* Note that despite all the efforts to check this method frequently, XJC may still fail to
	* invoke this method for a long time. Such scenario would include network related problems
	* or other I/O block (you can't even interrupt the thread while I/O is blocking.)
	* So just beware that this is not a cure-all.
	*
	* @return
	*      true if the {@link XJCListener} wants to abort the processing.
	* @since 2.1
	*/
	@:require(java1) @:overload public function isCanceled() : Bool;
	
	/**
	* Implemented by the driver of the compiler engine to handle
	* errors found during the compiliation.
	*
	* <p>
	* This class implements {@link ErrorHandler} so it can be
	* passed to anywhere where {@link ErrorHandler} is expected.
	*
	* <p>
	* However, to make the error handling easy (and make it work
	* with visitor patterns nicely), this interface is not allowed
	* to abort the processing. It merely receives errors.
	*
	* @author Kohsuke Kawaguchi (kohsuke.kawaguchi@sun.com)
	* @since 2.1 EA2
	*/
	@:require(java1) @:overload public function error(exception : org.xml.sax.SAXParseException) : Void;
	
	@:overload public function fatalError(exception : org.xml.sax.SAXParseException) : Void;
	
	@:overload public function warning(exception : org.xml.sax.SAXParseException) : Void;
	
	/**
	* Used to report possibly verbose information that
	* can be safely ignored.
	*/
	@:overload public function info(exception : org.xml.sax.SAXParseException) : Void;
	
	
}
