package com.sun.tools.javac.code;
/*
* Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/**
* A class for handling -Xlint suboptions and @SuppresssWarnings.
*
*  <p><b>This is NOT part of any supported API.
*  If you write code that depends on this, you do so at your own risk.
*  This code and its internal interfaces are subject to change or
*  deletion without notice.</b>
*/
extern class Lint
{
	/** The context key for the root Lint object. */
	@:protected @:static @:final private static var lintKey(default, null) : com.sun.tools.javac.util.Context.Context_Key<com.sun.tools.javac.code.Lint>;
	
	/** Get the root Lint instance. */
	@:overload @:public @:static public static function instance(context : com.sun.tools.javac.util.Context) : com.sun.tools.javac.code.Lint;
	
	/**
	* Returns the result of combining the values in this object with
	* the given annotation.
	*/
	@:overload @:public public function augment(attr : com.sun.tools.javac.code.Attribute.Attribute_Compound) : com.sun.tools.javac.code.Lint;
	
	/**
	* Returns the result of combining the values in this object with
	* the given annotations.
	*/
	@:overload @:public public function augment(attrs : com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute.Attribute_Compound>) : com.sun.tools.javac.code.Lint;
	
	/**
	* Returns the result of combining the values in this object with
	* the given annotations and flags.
	*/
	@:overload @:public public function augment(attrs : com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute.Attribute_Compound>, flags : haxe.Int64) : com.sun.tools.javac.code.Lint;
	
	@:overload @:protected private function new(context : com.sun.tools.javac.util.Context) : Void;
	
	@:overload @:protected private function new(other : com.sun.tools.javac.code.Lint) : Void;
	
	@:overload @:public public function toString() : String;
	
	/**
	* Checks if a warning category is enabled. A warning category may be enabled
	* on the command line, or by default, and can be temporarily disabled with
	* the SuppressWarnings annotation.
	*/
	@:overload @:public public function isEnabled(lc : com.sun.tools.javac.code.Lint.Lint_LintCategory) : Bool;
	
	/**
	* Checks is a warning category has been specifically suppressed, by means
	* of the SuppressWarnings annotation, or, in the case of the deprecated
	* category, whether it has been implicitly suppressed by virtue of the
	* current entity being itself deprecated.
	*/
	@:overload @:public public function isSuppressed(lc : com.sun.tools.javac.code.Lint.Lint_LintCategory) : Bool;
	
	
}
/**
* Categories of warnings that can be generated by the compiler.
*/
@:native('com$sun$tools$javac$code$Lint$LintCategory') extern enum Lint_LintCategory
{
	/**
	* Warn about use of unnecessary casts.
	*/
	CAST;
	/**
	* Warn about issues related to classfile contents
	*/
	CLASSFILE;
	/**
	* Warn about use of deprecated items.
	*/
	DEPRECATION;
	/**
	* Warn about items which are documented with an {@code @deprecated} JavaDoc
	* comment, but which do not have {@code @Deprecated} annotation.
	*/
	DEP_ANN;
	/**
	* Warn about division by constant integer 0.
	*/
	DIVZERO;
	/**
	* Warn about empty statement after if.
	*/
	EMPTY;
	/**
	* Warn about falling through from one case of a switch statement to the next.
	*/
	FALLTHROUGH;
	/**
	* Warn about finally clauses that do not terminate normally.
	*/
	FINALLY;
	/**
	* Warn about issues relating to use of command line options
	*/
	OPTIONS;
	/**
	* Warn about issues regarding method overrides.
	*/
	OVERRIDES;
	/**
	* Warn about invalid path elements on the command line.
	* Such warnings cannot be suppressed with the SuppressWarnings
	* annotation.
	*/
	PATH;
	/**
	* Warn about issues regarding annotation processing.
	*/
	PROCESSING;
	/**
	* Warn about unchecked operations on raw types.
	*/
	RAW;
	/**
	* Warn about Serializable classes that do not provide a serial version ID.
	*/
	SERIAL;
	/**
	* Warn about issues relating to use of statics
	*/
	STATIC;
	/**
	* Warn about proprietary API that may be removed in a future release.
	*/
	SUNAPI;
	/**
	* Warn about issues relating to use of try blocks (i.e. try-with-resources)
	*/
	TRY;
	/**
	* Warn about unchecked operations on raw types.
	*/
	UNCHECKED;
	/**
	* Warn about potentially unsafe vararg methods
	*/
	VARARGS;
	
}

@:native('com$sun$tools$javac$code$Lint$AugmentVisitor') extern class Lint_AugmentVisitor implements com.sun.tools.javac.code.Attribute.Attribute_Visitor
{
	@:overload @:public public function visitConstant(value : com.sun.tools.javac.code.Attribute.Attribute_Constant) : Void;
	
	@:overload @:public public function visitClass(clazz : com.sun.tools.javac.code.Attribute.Attribute_Class) : Void;
	
	@:overload @:public public function visitCompound(compound : com.sun.tools.javac.code.Attribute.Attribute_Compound) : Void;
	
	@:overload @:public public function visitArray(array : com.sun.tools.javac.code.Attribute.Attribute_Array) : Void;
	
	@:overload @:public public function visitEnum(e : com.sun.tools.javac.code.Attribute.Attribute_Enum) : Void;
	
	@:overload @:public public function visitError(e : com.sun.tools.javac.code.Attribute.Attribute_Error) : Void;
	
	
}
