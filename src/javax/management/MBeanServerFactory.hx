package javax.management;
/*
* Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.  Oracle designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
extern class MBeanServerFactory
{
	/**
	* Remove internal MBeanServerFactory references to a created
	* MBeanServer. This allows the garbage collector to remove the
	* MBeanServer object.
	*
	* @param mbeanServer the MBeanServer object to remove.
	*
	* @exception java.lang.IllegalArgumentException if
	* <code>mbeanServer</code> was not generated by one of the
	* <code>createMBeanServer</code> methods, or if
	* <code>releaseMBeanServer</code> was already called on it.
	*
	* @exception SecurityException if there is a SecurityManager and
	* the caller's permissions do not include or imply <code>{@link
	* MBeanServerPermission}("releaseMBeanServer")</code>.
	*/
	@:overload @:public @:static public static function releaseMBeanServer(mbeanServer : javax.management.MBeanServer) : Void;
	
	/**
	* <p>Return a new object implementing the MBeanServer interface
	* with a standard default domain name.  The default domain name
	* is used as the domain part in the ObjectName of MBeans when the
	* domain is specified by the user is null.</p>
	*
	* <p>The standard default domain name is
	* <code>DefaultDomain</code>.</p>
	*
	* <p>The MBeanServer reference is internally kept. This will
	* allow <CODE>findMBeanServer</CODE> to return a reference to
	* this MBeanServer object.</p>
	*
	* <p>This method is equivalent to <code>createMBeanServer(null)</code>.
	*
	* @return the newly created MBeanServer.
	*
	* @exception SecurityException if there is a SecurityManager and the
	* caller's permissions do not include or imply <code>{@link
	* MBeanServerPermission}("createMBeanServer")</code>.
	*
	* @exception JMRuntimeException if the property
	* <code>javax.management.builder.initial</code> exists but the
	* class it names cannot be instantiated through a public
	* no-argument constructor; or if the instantiated builder returns
	* null from its {@link MBeanServerBuilder#newMBeanServerDelegate
	* newMBeanServerDelegate} or {@link
	* MBeanServerBuilder#newMBeanServer newMBeanServer} methods.
	*
	* @exception ClassCastException if the property
	* <code>javax.management.builder.initial</code> exists and can be
	* instantiated but is not assignment compatible with {@link
	* MBeanServerBuilder}.
	*/
	@:overload @:public @:static public static function createMBeanServer() : javax.management.MBeanServer;
	
	/**
	* <p>Return a new object implementing the {@link MBeanServer}
	* interface with the specified default domain name.  The given
	* domain name is used as the domain part in the ObjectName of
	* MBeans when the domain is specified by the user is null.</p>
	*
	* <p>The MBeanServer reference is internally kept. This will
	* allow <CODE>findMBeanServer</CODE> to return a reference to
	* this MBeanServer object.</p>
	*
	* @param domain the default domain name for the created
	* MBeanServer.  This is the value that will be returned by {@link
	* MBeanServer#getDefaultDomain}.
	*
	* @return the newly created MBeanServer.
	*
	* @exception SecurityException if there is a SecurityManager and
	* the caller's permissions do not include or imply <code>{@link
	* MBeanServerPermission}("createMBeanServer")</code>.
	*
	* @exception JMRuntimeException if the property
	* <code>javax.management.builder.initial</code> exists but the
	* class it names cannot be instantiated through a public
	* no-argument constructor; or if the instantiated builder returns
	* null from its {@link MBeanServerBuilder#newMBeanServerDelegate
	* newMBeanServerDelegate} or {@link
	* MBeanServerBuilder#newMBeanServer newMBeanServer} methods.
	*
	* @exception ClassCastException if the property
	* <code>javax.management.builder.initial</code> exists and can be
	* instantiated but is not assignment compatible with {@link
	* MBeanServerBuilder}.
	*/
	@:overload @:public @:static public static function createMBeanServer(domain : String) : javax.management.MBeanServer;
	
	/**
	* <p>Return a new object implementing the MBeanServer interface
	* with a standard default domain name, without keeping an
	* internal reference to this new object.  The default domain name
	* is used as the domain part in the ObjectName of MBeans when the
	* domain is specified by the user is null.</p>
	*
	* <p>The standard default domain name is
	* <code>DefaultDomain</code>.</p>
	*
	* <p>No reference is kept. <CODE>findMBeanServer</CODE> will not
	* be able to return a reference to this MBeanServer object, but
	* the garbage collector will be able to remove the MBeanServer
	* object when it is no longer referenced.</p>
	*
	* <p>This method is equivalent to <code>newMBeanServer(null)</code>.</p>
	*
	* @return the newly created MBeanServer.
	*
	* @exception SecurityException if there is a SecurityManager and the
	* caller's permissions do not include or imply <code>{@link
	* MBeanServerPermission}("newMBeanServer")</code>.
	*
	* @exception JMRuntimeException if the property
	* <code>javax.management.builder.initial</code> exists but the
	* class it names cannot be instantiated through a public
	* no-argument constructor; or if the instantiated builder returns
	* null from its {@link MBeanServerBuilder#newMBeanServerDelegate
	* newMBeanServerDelegate} or {@link
	* MBeanServerBuilder#newMBeanServer newMBeanServer} methods.
	*
	* @exception ClassCastException if the property
	* <code>javax.management.builder.initial</code> exists and can be
	* instantiated but is not assignment compatible with {@link
	* MBeanServerBuilder}.
	*/
	@:overload @:public @:static public static function newMBeanServer() : javax.management.MBeanServer;
	
	/**
	* <p>Return a new object implementing the MBeanServer interface
	* with the specified default domain name, without keeping an
	* internal reference to this new object.  The given domain name
	* is used as the domain part in the ObjectName of MBeans when the
	* domain is specified by the user is null.</p>
	*
	* <p>No reference is kept. <CODE>findMBeanServer</CODE> will not
	* be able to return a reference to this MBeanServer object, but
	* the garbage collector will be able to remove the MBeanServer
	* object when it is no longer referenced.</p>
	*
	* @param domain the default domain name for the created
	* MBeanServer.  This is the value that will be returned by {@link
	* MBeanServer#getDefaultDomain}.
	*
	* @return the newly created MBeanServer.
	*
	* @exception SecurityException if there is a SecurityManager and the
	* caller's permissions do not include or imply <code>{@link
	* MBeanServerPermission}("newMBeanServer")</code>.
	*
	* @exception JMRuntimeException if the property
	* <code>javax.management.builder.initial</code> exists but the
	* class it names cannot be instantiated through a public
	* no-argument constructor; or if the instantiated builder returns
	* null from its {@link MBeanServerBuilder#newMBeanServerDelegate
	* newMBeanServerDelegate} or {@link
	* MBeanServerBuilder#newMBeanServer newMBeanServer} methods.
	*
	* @exception ClassCastException if the property
	* <code>javax.management.builder.initial</code> exists and can be
	* instantiated but is not assignment compatible with {@link
	* MBeanServerBuilder}.
	*/
	@:overload @:public @:static public static function newMBeanServer(domain : String) : javax.management.MBeanServer;
	
	/**
	* <p>Return a list of registered MBeanServer objects.  A
	* registered MBeanServer object is one that was created by one of
	* the <code>createMBeanServer</code> methods and not subsequently
	* released with <code>releaseMBeanServer</code>.</p>
	*
	* @param agentId The agent identifier of the MBeanServer to
	* retrieve.  If this parameter is null, all registered
	* MBeanServers in this JVM are returned.  Otherwise, only
	* MBeanServers whose id is equal to <code>agentId</code> are
	* returned.  The id of an MBeanServer is the
	* <code>MBeanServerId</code> attribute of its delegate MBean.
	*
	* @return A list of MBeanServer objects.
	*
	* @exception SecurityException if there is a SecurityManager and the
	* caller's permissions do not include or imply <code>{@link
	* MBeanServerPermission}("findMBeanServer")</code>.
	*/
	@:overload @:public @:synchronized @:static public static function findMBeanServer(agentId : String) : java.util.ArrayList<javax.management.MBeanServer>;
	
	/**
	* Return the ClassLoaderRepository used by the given MBeanServer.
	* This method is equivalent to {@link
	* MBeanServer#getClassLoaderRepository() server.getClassLoaderRepository()}.
	* @param server The MBeanServer under examination. Since JMX 1.2,
	* if <code>server</code> is <code>null</code>, the result is a
	* {@link NullPointerException}.  This behavior differs from what
	* was implemented in JMX 1.1 - where the possibility to use
	* <code>null</code> was deprecated.
	* @return The Class Loader Repository used by the given MBeanServer.
	* @exception SecurityException if there is a SecurityManager and
	* the caller's permissions do not include or imply <code>{@link
	* MBeanPermission}("getClassLoaderRepository")</code>.
	*
	* @exception NullPointerException if <code>server</code> is null.
	*
	**/
	@:overload @:public @:static public static function getClassLoaderRepository(server : javax.management.MBeanServer) : javax.management.loading.ClassLoaderRepository;
	
	
}
